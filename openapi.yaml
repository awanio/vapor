openapi: 3.1.0
info:
  title: Go System API
  version: 1.0.0
  description: RESTful API for Linux system management
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
paths:
  /auth/login:
    post:
      summary: Authenticate user
      description: |
        Authenticate a user and receive a JWT token.
        
        **Authentication Methods:**
        1. Built-in admin account (development builds only):
           - Username: admin
           - Password: admin123
           - Note: Disabled in production builds for security
        
        2. Linux system users (recommended for production):
           - Any valid Linux user with their system credentials
           - Uses system authentication via 'su' command
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /network/interfaces:
    get:
      summary: List network interfaces
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of interfaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfacesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/interfaces/{name}/up:
    put:
      summary: Bring interface up
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interface brought up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/interfaces/{name}/down:
    put:
      summary: Bring interface down
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interface brought down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/interfaces/{name}/address:
    post:
      summary: Configure IP address
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '200':
          description: Address configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
    put:
      summary: Update IP address
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
    delete:
      summary: Delete IP address
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: query
          required: true
          schema:
            type: string
            format: ipv4
      responses:
        '200':
          description: Address deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface or address not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bridges:
    get:
      summary: List network bridges
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bridges
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bridges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Interface'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bridge:
    post:
      summary: Create network bridge
      tags:
        - Network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeRequest'
      responses:
        '200':
          description: Bridge created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: Bridge already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bridge/{name}:
    put:
      summary: Update network bridge
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeRequest'
      responses:
        '200':
          description: Bridge updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bridge not found
        '400':
          description: Not a bridge interface
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete network bridge
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bridge deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bridge not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bonds:
    get:
      summary: List network bonds
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bonds
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bonds:
                        type: array
                        items:
                          $ref: '#/components/schemas/Interface'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bond:
    post:
      summary: Create network bond
      tags:
        - Network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BondRequest'
      responses:
        '200':
          description: Bond created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: Bond already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bond/{name}:
    put:
      summary: Update network bond
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BondRequest'
      responses:
        '200':
          description: Bond updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bond not found
        '400':
          description: Not a bond interface
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete network bond
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bond deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bond not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/vlans:
    get:
      summary: List VLAN interfaces
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of VLANs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      vlans:
                        type: array
                        items:
                          $ref: '#/components/schemas/Interface'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/vlan:
    post:
      summary: Create VLAN interface
      tags:
        - Network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLANRequest'
      responses:
        '200':
          description: VLAN created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: VLAN already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/vlan/{name}:
    put:
      summary: Update VLAN interface
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLANRequest'
      responses:
        '200':
          description: VLAN updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: VLAN not found
        '400':
          description: Not a VLAN interface
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete VLAN interface
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: VLAN deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: VLAN not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/disks:
    get:
      summary: List storage disks
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of disks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisksResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/mount:
    post:
      summary: Mount filesystem
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MountRequest'
      responses:
        '200':
          description: Filesystem mounted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Device not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/unmount:
    post:
      summary: Unmount filesystem
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnmountRequest'
      responses:
        '200':
          description: Filesystem unmounted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/format:
    post:
      summary: Format disk
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatRequest'
      responses:
        '200':
          description: Disk formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Device not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/vgs:
    get:
      summary: List LVM volume groups
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Volume groups listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeGroupsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/lvs:
    get:
      summary: List LVM logical volumes
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logical volumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalVolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/pvs:
    get:
      summary: List LVM physical volumes
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Physical volumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalVolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/vg:
    post:
      summary: Create LVM volume group
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVGRequest'
      responses:
        '200':
          description: Volume group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/lv:
    post:
      summary: Create LVM logical volume
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLVRequest'
      responses:
        '200':
          description: Logical volume created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/iscsi/discover:
    post:
      summary: Discover iSCSI targets
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ISCSIDiscoverRequest'
      responses:
        '200':
          description: Targets discovered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISCSITargetsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /containers:
    get:
      summary: List containers
      tags:
        - Container
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Containers listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      containers:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 2309b08a1303d054769d3adba93ac148c6cc31748a6dbecda5b12156028b034c
                            name:
                              type: string
                              example: reloader
                            image:
                              type: string
                              example: sha256:5ea6cbf6dee9b4b67edbd108986d75c5958273e6f6faaf0c18e734572b6b8821
                            state:
                              type: string
                              example: CONTAINER_RUNNING
                            status:
                              type: string
                              example: CONTAINER_RUNNING
                            created_at:
                              type: string
                              format: date-time
                              example: "2025-07-25T09:38:51.086238448Z"
                            labels:
                              type: object
                              additionalProperties:
                                type: string
                              example: {"io.kubernetes.container.name": "reloader"}
                            runtime:
                              type: string
                              example: containerd
                      count:
                        type: integer
                        example: 151
                      runtime:
                        type: string
                        example: containerd
                  error:
                    type: object
                    nullable: true
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: NO_RUNTIME_AVAILABLE
                      message:
                        type: string
                        example: "No container runtime found. Tried CRI sockets ([/run/containerd/containerd.sock /var/run/crio/crio.sock]) and Docker. Last error: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?"

  /containers/{id}:
    get:
      summary: Get detailed container information
      tags:
        - Container
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID
          schema:
            type: string
      responses:
        '200':
          description: Container details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      container:
                        $ref: '#/components/schemas/ContainerDetail'
                      runtime:
                        type: string
                        example: docker
                      execution_context:
                        type: object
                        properties:
                          directory_state:
                            type: object
                            properties:
                              pwd:
                                type: string
                                example: /Users/kandar/Workspaces/vapor/api
                              home:
                                type: string
                                example: /Users/kandar
                          operating_system:
                            type: object
                            properties:
                              platform:
                                type: string
                                example: MacOS
                          current_time:
                            type: string
                            format: date-time
                            example: '2025-08-02T06:33:19Z'
                          shell:
                            type: object
                            properties:
                              name:
                                type: string
                                example: zsh
                              version:
                                type: string
                                example: '5.9'
        '400':
          description: Invalid container ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to get container details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /containers/{id}/logs:
    get:
      summary: Get container logs
      tags:
        - Container
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID
          schema:
            type: string
      responses:
        '200':
          description: Container logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      container_id:
                        type: string
                        example: abc123def456
                      logs:
                        type: string
                        description: Container logs output
                        example: "2025-08-02T09:00:00.000Z Started application\n2025-08-02T09:00:01.000Z Listening on port 8080\n"
                      runtime:
                        type: string
                        example: docker
                  error:
                    type: object
                    nullable: true
        '400':
          description: Invalid container ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: INVALID_ID
                  message: Container ID is required
        '500':
          description: Failed to get container logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: CONTAINER_LOGS_ERROR
                  message: failed to get container logs
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: NO_RUNTIME_AVAILABLE
                  message: No container runtime found

  /images:
    get:
      summary: List images
      tags:
        - Container
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Images listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      images:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: sha256:d12fc38c77e50eab23af17f302d5b94514173d9f84150b7662aecbfeb21f8717
                            repo_tags:
                              type: array
                              items:
                                type: string
                              example: ["r.awan.app/library/remote-console-ipmi:2.0"]
                            repo_digests:
                              type: array
                              items:
                                type: string
                              example: ["quay.io/operatorhubio/catalog@sha256:096fa413e1b8dba2071020e5809597e7d86da5a2833ffdf97a20457af714e678"]
                            size:
                              type: integer
                              example: 109999465
                            created_at:
                              type: string
                              format: date-time
                              example: "2025-08-01T12:40:55.236465486Z"
                            runtime:
                              type: string
                              example: containerd
                      count:
                        type: integer
                        example: 92
                      runtime:
                        type: string
                        example: containerd
                  error:
                    type: object
                    nullable: true
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: NO_RUNTIME_AVAILABLE
                      message:
                        type: string
                        example: "No container runtime found. Tried CRI sockets ([/run/containerd/containerd.sock /var/run/crio/crio.sock]) and Docker. Last error: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?"

  /images/{id}:
    get:
      summary: Get detailed image information
      tags:
        - Container
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Image ID
          schema:
            type: string
      responses:
        '200':
          description: Image details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      image:
                        $ref: '#/components/schemas/ImageDetail'
                      runtime:
                        type: string
                        example: docker
        '400':
          description: Invalid image ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to get image details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /images/import:
    post:
      summary: Import container image from tarball
      tags:
        - Container
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      import_result:
                        $ref: '#/components/schemas/ImageImportResult'
                      runtime:
                        type: string
                        example: docker
                      filename:
                        type: string
                        example: "my-image.tar.gz"
        '400':
          description: Invalid file or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to import image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /docker/images/import:
    post:
      summary: Import Docker image from tarball
      tags:
        - Docker
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Docker image imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      import_result:
                        $ref: '#/components/schemas/ImageImportResult'
                      runtime:
                        type: string
                        example: docker
                      filename:
                        type: string
                        example: "docker-image.tar.gz"
        '400':
          description: Invalid file or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to import Docker image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /docker/images/upload:
    post:
      summary: Create resumable upload session
      description: Create a new resumable upload session for Docker image using TUS protocol
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: Upload-Length
          in: header
          required: true
          description: Total size of the file to upload
          schema:
            type: integer
            format: int64
        - name: Upload-Metadata
          in: header
          required: false
          description: Metadata about the upload (filename, etc.)
          schema:
            type: string
      responses:
        '201':
          description: Upload session created successfully
          headers:
            Location:
              description: URL for the upload session
              schema:
                type: string
            Upload-Offset:
              description: Current upload offset (starts at 0)
              schema:
                type: integer
            Tus-Resumable:
              description: TUS protocol version
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  upload_id:
                    type: string
                    example: "abc123-def456-ghi789"
                  upload_url:
                    type: string
                    example: "/docker/images/upload/abc123-def456-ghi789"
                  expires_at:
                    type: string
                    format: date-time
                    example: "2025-08-06T15:38:32Z"
        '400':
          description: Invalid upload request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List active upload sessions
      description: List all active resumable upload sessions
      tags:
        - Docker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Upload sessions listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      uploads:
                        type: array
                        items:
                          type: object
                          properties:
                            upload_id:
                              type: string
                            total_size:
                              type: integer
                            uploaded_size:
                              type: integer
                            progress:
                              type: number
                              format: float
                            status:
                              type: string
                              enum: [created, in_progress, completed, failed, cancelled]
                            created_at:
                              type: string
                              format: date-time
                            updated_at:
                              type: string
                              format: date-time
                            filename:
                              type: string
                      count:
                        type: integer

  /docker/images/upload/{id}:
    head:
      summary: Get upload session info
      description: Get information about a resumable upload session
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Upload session ID
          schema:
            type: string
      responses:
        '200':
          description: Upload session info retrieved successfully
          headers:
            Upload-Offset:
              description: Current upload offset
              schema:
                type: integer
            Upload-Length:
              description: Total upload length
              schema:
                type: integer
            Tus-Resumable:
              description: TUS protocol version
              schema:
                type: string
            Cache-Control:
              description: Cache control header
              schema:
                type: string
        '404':
          description: Upload session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Upload chunk
      description: Upload a chunk of data to a resumable upload session
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Upload session ID
          schema:
            type: string
        - name: Upload-Offset
          in: header
          required: true
          description: Byte offset where this chunk starts
          schema:
            type: integer
            format: int64
        - name: Content-Type
          in: header
          required: true
          description: Must be application/offset+octet-stream
          schema:
            type: string
            enum: ["application/offset+octet-stream"]
      requestBody:
        required: true
        content:
          application/offset+octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Chunk uploaded successfully
          headers:
            Upload-Offset:
              description: New upload offset after this chunk
              schema:
                type: integer
            Tus-Resumable:
              description: TUS protocol version
              schema:
                type: string
        '400':
          description: Invalid chunk upload request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Upload session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offset mismatch or upload already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: Upload session expired or cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get upload status
      description: Get detailed status of a resumable upload session
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Upload session ID
          schema:
            type: string
      responses:
        '200':
          description: Upload status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      upload_id:
                        type: string
                      total_size:
                        type: integer
                      uploaded_size:
                        type: integer
                      progress:
                        type: number
                        format: float
                      status:
                        type: string
                        enum: [created, in_progress, completed, failed, cancelled]
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                      metadata:
                        type: object
                        additionalProperties:
                          type: string
                      chunk_size:
                        type: integer
        '404':
          description: Upload session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Cancel upload session
      description: Cancel a resumable upload session
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Upload session ID
          schema:
            type: string
      responses:
        '204':
          description: Upload session cancelled successfully
          headers:
            Tus-Resumable:
              description: TUS protocol version
              schema:
                type: string
        '404':
          description: Upload session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /docker/images/upload/{id}/complete:
    post:
      summary: Complete upload and import image
      description: Complete a resumable upload session and import the Docker image
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Upload session ID
          schema:
            type: string
      responses:
        '200':
          description: Upload completed and image imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      upload_id:
                        type: string
                      import_result:
                        $ref: '#/components/schemas/ImageImportResult'
                      runtime:
                        type: string
                        example: docker
                      filename:
                        type: string
        '400':
          description: Upload not complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Upload session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to import image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /storage/iscsi/sessions:
    get:
      summary: List iSCSI sessions
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sessions listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISCSISessionsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/iscsi/login:
    post:
      summary: Login to iSCSI target
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ISCSILoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/iscsi/logout:
    post:
      summary: Logout from iSCSI target
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ISCSILogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/multipath/devices:
    get:
      summary: List multipath devices
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Multipath devices listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipathDevicesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/multipath/paths:
    get:
      summary: List multipath paths
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Multipath paths listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipathPathsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/btrfs/subvolumes:
    get:
      summary: List BTRFS subvolumes
      tags:
        - Storage
      security:
        - bearerAuth: []
      parameters:
        - name: mount_point
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Subvolumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BTRFSSubvolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/btrfs/subvolume:
    post:
      summary: Create BTRFS subvolume
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BTRFSSubvolumeRequest'
      responses:
        '200':
          description: Subvolume created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete BTRFS subvolume
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BTRFSSubvolumeRequest'
      responses:
        '200':
          description: Subvolume deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/btrfs/snapshot:
    post:
      summary: Create BTRFS snapshot
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BTRFSSnapshotRequest'
      responses:
        '200':
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/devices:
    get:
      summary: List RAID devices
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: RAID devices listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RAIDDevicesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/available-disks:
    get:
      summary: Get available disks for RAID
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Available disks listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RAIDAvailableDisksResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/create:
    post:
      summary: Create RAID device
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRAIDRequest'
      responses:
        '200':
          description: RAID device created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid request or validation error
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/destroy:
    post:
      summary: Destroy RAID device
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroyRAIDRequest'
      responses:
        '200':
          description: RAID device destroyed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /docker/ps:
    get:
      summary: List Docker containers
      description: |
        List Docker containers with optional filtering and pagination.
        Returns information about container state, image, ports, and resource usage.
      tags:
        - Docker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Containers listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerContainersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          description: Docker service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: DOCKER_ERROR
                  message: "Failed to list containers: Cannot connect to the Docker daemon"

  /docker/images:
    get:
      summary: List Docker images
      description: List all Docker images available on the system
      tags:
        - Docker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Images listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerImagesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          description: Docker service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: DOCKER_ERROR
                  message: "Failed to list images: Cannot connect to the Docker daemon"

  /docker/images/pull:
    post:
      summary: Pull Docker image
      description: Pull a Docker image from a registry (e.g., Docker Hub)
      tags:
        - Docker
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagePullRequest'
            examples:
              pullNginx:
                summary: Pull nginx image
                value:
                  imageName: nginx
                  tag: latest
              pullAlpine:
                summary: Pull Alpine Linux
                value:
                  imageName: alpine
                  tag: "3.18"
      responses:
        '200':
          description: Image pulled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePullResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to pull image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: PULL_IMAGE_FAILED
                  message: "Failed to pull image: repository does not exist"

  /docker/containers:
    post:
      summary: Create Docker container
      description: Create a new Docker container from an image
      tags:
        - Docker
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerCreateRequest'
            examples:
              createNginx:
                summary: Create nginx container
                value:
                  name: my-nginx
                  image: nginx:latest
                  env:
                    - "ENV=production"
                  portBindings:
                    "80/tcp":
                      - hostPort: "8080"
              createUbuntu:
                summary: Create Ubuntu container
                value:
                  name: my-ubuntu
                  image: ubuntu:22.04
                  cmd: ["/bin/bash"]
                  env:
                    - "DEBIAN_FRONTEND=noninteractive"
      responses:
        '201':
          description: Container created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerCreateResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to create container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: CREATE_CONTAINER_FAILED
                  message: "Failed to create container: image not found"

  /docker/images/{id}:
    delete:
      summary: Remove Docker image
      description: Remove a Docker image from the system
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Image ID or tag
          schema:
            type: string
      responses:
        '200':
          description: Image removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to remove image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: REMOVE_IMAGE_FAILED
                  message: "Failed to remove image: Image is being used by running container"

  /docker/networks:
    get:
      summary: List Docker networks
      description: List all Docker networks configured on the system
      tags:
        - Docker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Networks listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerNetworksResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          description: Docker service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: DOCKER_ERROR
                  message: "Failed to list networks: Cannot connect to the Docker daemon"

  /docker/networks/{id}:
    delete:
      summary: Remove Docker network
      description: Remove a Docker network from the system
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Network ID or name
          schema:
            type: string
      responses:
        '200':
          description: Network removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to remove network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: REMOVE_NETWORK_FAILED
                  message: "Failed to remove network: Network is in use by containers"

  /docker/volumes:
    get:
      summary: List Docker volumes
      description: List all Docker volumes available on the system
      tags:
        - Docker
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Volumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerVolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          description: Docker service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: DOCKER_ERROR
                  message: "Failed to list volumes: Cannot connect to the Docker daemon"

  /docker/volumes/{id}:
    delete:
      summary: Remove Docker volume
      description: Remove a Docker volume from the system
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Volume name
          schema:
            type: string
      responses:
        '200':
          description: Volume removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to remove volume
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: REMOVE_VOLUME_FAILED
                  message: "Failed to remove volume: Volume is in use by containers"

  /docker/containers/{id}:
    get:
      summary: Get Docker container details
      description: Get detailed information about a specific Docker container
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID or name
          schema:
            type: string
      responses:
        '200':
          description: Container details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: CONTAINER_NOT_FOUND
                  message: "Failed to get container detail: No such container"
    delete:
      summary: Remove Docker container
      description: Remove a Docker container (must be stopped first)
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID or name
          schema:
            type: string
      responses:
        '200':
          description: Container removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to remove container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: REMOVE_CONTAINER_FAILED
                  message: "Failed to remove container: Cannot remove running container"

  /docker/containers/{id}/start:
    post:
      summary: Start Docker container
      description: Start a stopped Docker container
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID or name
          schema:
            type: string
      responses:
        '200':
          description: Container started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to start container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: START_CONTAINER_FAILED
                  message: "Failed to start container: Container already running"

  /docker/containers/{id}/stop:
    post:
      summary: Stop Docker container
      description: Stop a running Docker container
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID or name
          schema:
            type: string
      responses:
        '200':
          description: Container stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to stop container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: STOP_CONTAINER_FAILED
                  message: "Failed to stop container: Container not running"

  /docker/containers/{id}/kill:
    post:
      summary: Kill Docker container
      description: Forcefully kill a running Docker container using SIGKILL
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID or name
          schema:
            type: string
      responses:
        '200':
          description: Container killed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerActionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to kill container
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: KILL_CONTAINER_FAILED
                  message: "Failed to kill container: Container not running"


  /docker/containers/{id}/logs:
    get:
      summary: Get Docker container logs
      description: Get logs from a Docker container
      tags:
        - Docker
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID or name
          schema:
            type: string
      responses:
        '200':
          description: Container logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerLogsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Failed to get logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: GET_LOGS_FAILED
                  message: "Failed to get container logs: Container not found"

  /users:
    get:
      summary: List users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      summary: Create user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /users/{username}:
    put:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /users/{username}/reset-password:
    post:
      summary: Reset user password
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user whose password to reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (invalid password format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not implemented (on non-Linux systems)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /logs:
    get:
      summary: Query system logs
      tags:
        - Logs
      security:
        - bearerAuth: []
      parameters:
        - name: service
          in: query
          schema:
            type: string
          description: Filter by service name
        - name: priority
          in: query
          schema:
            type: string
            enum: [emergency, alert, critical, error, warning, notice, info, debug]
          description: Filter by priority
        - name: since
          in: query
          schema:
            type: string
          description: Show logs since timestamp
        - name: until
          in: query
          schema:
            type: string
          description: Show logs until timestamp
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 100
            maximum: 1000
      responses:
        '200':
          description: Log entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/summary:
    get:
      summary: Get system summary
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSummaryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/hardware:
    get:
      summary: Get hardware information
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Hardware information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HardwareResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/memory:
    get:
      summary: Get memory information
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Memory information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/cpu:
    get:
      summary: Get CPU information
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: CPU information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CPUResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /ws/metrics:
    get:
      summary: WebSocket endpoint for live system metrics
      description: |
        Establish a WebSocket connection to receive real-time system metrics.
        
        **WebSocket URL**: `ws://localhost:8080/ws/metrics`
        
        **Authentication**: Send JWT token in the first message after connection:
        ```json
        {
          "type": "auth",
          "payload": {
            "token": "your-jwt-token"
          }
        }
        ```
        
        **Subscribe to metrics**:
        ```json
        {
          "type": "subscribe"
        }
        ```
        
        **Unsubscribe from metrics**:
        ```json
        {
          "type": "unsubscribe"
        }
        ```
        
        **Server messages** will be in the format:
        ```json
        {
          "type": "metric",
          "metric": "cpu",
          "timestamp": "2024-01-01T00:00:00Z",
          "data": { ... }
        }
        ```
      tags:
        - WebSocket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /ws/logs:
    get:
      summary: WebSocket endpoint for live system logs
      description: |
        Establish a WebSocket connection to receive real-time system logs.
        
        **WebSocket URL**: `ws://localhost:8080/ws/logs`
        
        **Authentication**: Send JWT token in the first message after connection:
        ```json
        {
          "type": "auth",
          "payload": {
            "token": "your-jwt-token"
          }
        }
        ```
        
        **Subscribe Examples**:
        
        1. All logs from all services (most verbose):
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "follow": true
            }
          }
        }
        ```
        
        2. Specific service logs:
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "unit": "sshd",
              "priority": "info",
              "follow": true
            }
          }
        }
        ```
        
        3. Kernel messages:
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "unit": "kernel",
              "follow": true
            }
          }
        }
        ```
        
        4. Recent logs (last 10 minutes):
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "since": "10 minutes ago",
              "follow": true
            }
          }
        }
        ```
        
        **Server Response Format**:
        ```json
        {
          "type": "data",
          "payload": {
            "timestamp": "2024-01-15T10:30:00Z",
            "level": "info",
            "unit": "sshd.service",
            "message": "Accepted publickey for john from 192.168.1.100 port 52341 ssh2"
          }
        }
        ```
        
        **Priority Levels** (from least to most severe):
        - `debug` - Debugging messages
        - `info` - Informational messages  
        - `notice` - Normal but significant messages
        - `warning` - Warning messages
        - `error` - Error messages
        - `critical` - Critical messages
      tags:
        - WebSocket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /ws/terminal:
    get:
      summary: WebSocket endpoint for terminal session
      description: |
        Establish a WebSocket connection for an interactive terminal session.
        
        **WebSocket URL**: `ws://localhost:8080/ws/terminal`
        
        **Authentication**: Send JWT token in the first message after connection:
        ```json
        {
          "type": "auth",
          "payload": {
            "token": "your-jwt-token"
          }
        }
        ```
        
        **Start terminal session**:
        ```json
        {
          "type": "subscribe",
          "payload": {
            "cols": 80,
            "rows": 24,
            "shell": "/bin/bash"
          }
        }
        ```
        
        **Send input**:
        ```json
        {
          "type": "input",
          "data": "ls -la\n"
        }
        ```
        
        **Resize terminal**:
        ```json
        {
          "type": "resize",
          "payload": {
            "cols": 120,
            "rows": 40
          }
        }
        ```
        
        **Server messages** will be in the format:
        ```json
        {
          "type": "output",
          "data": "terminal output..."
        }
        ```
      tags:
        - WebSocket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /kubernetes/crds:
    get:
      summary: List all Kubernetes Custom Resource Definitions
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: CRDs listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRDsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/crds/{name}:
    get:
      summary: Get detailed CRD information
      description: Get detailed information about a specific Custom Resource Definition
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: CRD name
          schema:
            type: string
      responses:
        '200':
          description: CRD details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRDDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: CRD not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/crds/{name}/list:
    get:
      summary: List all objects for a specific CRD
      description: List all Kubernetes objects for a specific Custom Resource Definition
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: CRD name
          schema:
            type: string
        - name: namespace
          in: query
          required: false
          description: Namespace to filter objects by. If not provided, all namespaces are searched for cluster-scoped CRDs, and the default namespace is used for namespaced-scoped CRDs.
          schema:
            type: string
      responses:
        '200':
          description: CRD objects listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRDObjectListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: CRD not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/crds/{name}/detail/{namespace}/{object-name}:
    get:
      summary: Get detailed CRD object information
      description: Get detailed information about a specific CRD object. For namespaced CRDs, provide the actual namespace. For cluster-scoped CRDs, use '-' as the namespace.
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: CRD name
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          description: Namespace for the CRD object. Use '-' for cluster-scoped CRDs, or the actual namespace name for namespaced CRDs.
          schema:
            type: string
        - name: object-name
          in: path
          required: true
          description: The name of the CRD object
          schema:
            type: string
      responses:
        '200':
          description: CRD object details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRDObjectDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: CRD or object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/pods:
    get:
      summary: List all pods in the cluster
      description: List all pods across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pods listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/deployments:
    get:
      summary: List all deployments in the cluster
      description: List all deployments across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Deployments listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/services:
    get:
      summary: List all services in the cluster
      description: List all services across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Services listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/ingresses:
    get:
      summary: List all ingresses in the cluster
      description: List all ingresses across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ingresses listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngressesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/pvcs:
    get:
      summary: List all persistent volume claims in the cluster
      description: List all PVCs across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: PVCs listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PVCsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/pvs:
    get:
      summary: List all persistent volumes in the cluster
      description: List all PVs in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: PVs listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PVsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/secrets:
    get:
      summary: List all secrets in the cluster
      description: List all secrets across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Secrets listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/configmaps:
    get:
      summary: List all config maps in the cluster
      description: List all config maps across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Config maps listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigMapsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/namespaces:
    get:
      summary: List all namespaces in the cluster
      description: List all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Namespaces listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/nodes:
    get:
      summary: List all nodes in the cluster
      description: List all nodes in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Nodes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/daemonsets:
    get:
      summary: List all daemon sets in the cluster
      description: List all daemon sets across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daemon sets listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaemonSetsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/statefulsets:
    get:
      summary: List all stateful sets in the cluster
      description: List all stateful sets across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Stateful sets listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatefulSetsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/jobs:
    get:
      summary: List all jobs in the cluster
      description: List all jobs across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Jobs listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/cronjobs:
    get:
      summary: List all cron jobs in the cluster
      description: List all cron jobs across all namespaces in the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cron jobs listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CronJobsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/cluster-info:
    get:
      summary: Get cluster information
      description: Get basic information about the Kubernetes cluster
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cluster information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterInfoResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/pods/{namespace}/{name}:
    get:
      summary: Get detailed pod information
      description: Get detailed information about a specific pod in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: Pod namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Pod name
          schema:
            type: string
      responses:
        '200':
          description: Pod details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Pod not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/deployments/{namespace}/{name}:
    get:
      summary: Get detailed deployment information
      description: Get detailed information about a specific deployment in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: Deployment namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Deployment name
          schema:
            type: string
      responses:
        '200':
          description: Deployment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/services/{namespace}/{name}:
    get:
      summary: Get detailed service information
      description: Get detailed information about a specific service in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: Service namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Service name
          schema:
            type: string
      responses:
        '200':
          description: Service details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/ingresses/{namespace}/{name}:
    get:
      summary: Get detailed ingress information
      description: Get detailed information about a specific ingress in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: Ingress namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Ingress name
          schema:
            type: string
      responses:
        '200':
          description: Ingress details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngressDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Ingress not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/pvcs/{namespace}/{name}:
    get:
      summary: Get detailed PVC information
      description: Get detailed information about a specific persistent volume claim in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: PVC namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: PVC name
          schema:
            type: string
      responses:
        '200':
          description: PVC details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PVCDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: PVC not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/pvs/{name}:
    get:
      summary: Get detailed PV information
      description: Get detailed information about a specific persistent volume
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: PV name
          schema:
            type: string
      responses:
        '200':
          description: PV details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PVDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: PV not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/secrets/{namespace}/{name}:
    get:
      summary: Get detailed secret information
      description: Get detailed information about a specific secret in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: Secret namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Secret name
          schema:
            type: string
      responses:
        '200':
          description: Secret details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/configmaps/{namespace}/{name}:
    get:
      summary: Get detailed configmap information
      description: Get detailed information about a specific configmap in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: ConfigMap namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: ConfigMap name
          schema:
            type: string
      responses:
        '200':
          description: ConfigMap details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigMapDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: ConfigMap not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/namespaces/{name}:
    get:
      summary: Get detailed namespace information
      description: Get detailed information about a specific namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Namespace name
          schema:
            type: string
      responses:
        '200':
          description: Namespace details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Namespace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/nodes/{name}:
    get:
      summary: Get detailed node information
      description: Get detailed information about a specific node
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Node name
          schema:
            type: string
      responses:
        '200':
          description: Node details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/daemonsets/{namespace}/{name}:
    get:
      summary: Get detailed daemonset information
      description: Get detailed information about a specific daemonset in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: DaemonSet namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: DaemonSet name
          schema:
            type: string
      responses:
        '200':
          description: DaemonSet details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaemonSetDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: DaemonSet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/statefulsets/{namespace}/{name}:
    get:
      summary: Get detailed statefulset information
      description: Get detailed information about a specific statefulset in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: StatefulSet namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: StatefulSet name
          schema:
            type: string
      responses:
        '200':
          description: StatefulSet details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatefulSetDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: StatefulSet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/jobs/{namespace}/{name}:
    get:
      summary: Get detailed job information
      description: Get detailed information about a specific job in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: Job namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: Job name
          schema:
            type: string
      responses:
        '200':
          description: Job details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/cronjobs/{namespace}/{name}:
    get:
      summary: Get detailed cronjob information
      description: Get detailed information about a specific cronjob in a namespace
      tags:
        - Kubernetes
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: path
          required: true
          description: CronJob namespace
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: CronJob name
          schema:
            type: string
      responses:
        '200':
          description: CronJob details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CronJobDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: CronJob not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/KubernetesNotInstalledError'

  /kubernetes/helm/releases:
    get:
      summary: List Helm releases
      description: List all Helm releases from all namespaces in the Kubernetes cluster by default. Use namespace parameter to filter to a specific namespace.
      tags:
        - Kubernetes
        - Helm
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          description: Filter releases by specific namespace (overrides default all-namespace behavior)
          required: false
          schema:
            type: string
            example: "default"
        - name: all
          in: query
          description: |
            Explicitly control whether to show releases from all namespaces (default: true)
          required: false
          schema:
            type: boolean
            default: true
        - name: filter
          in: query
          description: Filter releases by name pattern
          required: false
          schema:
            type: string
            example: "nginx"
      responses:
        '200':
          description: Helm releases listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmReleasesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/HelmNotAvailableError'
        '500':
          $ref: '#/components/responses/HelmError'

  /kubernetes/helm/charts:
    get:
      summary: List Helm charts
      description: Search all Helm charts from configured repositories (equivalent to 'helm search repo -l')
      tags:
        - Kubernetes
        - Helm
      security:
        - bearerAuth: []
      parameters:
        - name: repository
          in: query
          description: Filter charts by repository name
          required: false
          schema:
            type: string
            example: "bitnami"
        - name: all_versions
          in: query
          description: Show all versions of charts (equivalent to -l flag in helm search)
          required: false
          schema:
            type: boolean
            default: true
        - name: devel
          in: query
          description: Include development versions (equivalent to --devel flag)
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Helm charts listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmChartsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/HelmNotAvailableError'
        '500':
          $ref: '#/components/responses/HelmError'

  /kubernetes/helm/repositories:
    get:
      summary: List Helm repositories
      description: List all configured Helm repositories (equivalent to 'helm repo list')
      tags:
        - Kubernetes
        - Helm
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Helm repositories listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRepositoriesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/HelmNotAvailableError'
        '500':
          $ref: '#/components/responses/HelmError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    KubernetesNotInstalledError:
      description: Kubernetes is not installed on the system
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum: [KUBERNETES_NOT_INSTALLED]
                  message:
                    type: string
                    example: "Kubernetes is not installed on this system"
                  details:
                    type: string
                    example: "The kubelet service was not found on this system. Please install Kubernetes to use these features."
              data:
                type: object
                nullable: true

    HelmNotAvailableError:
      description: Helm is not available
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum: [HELM_NOT_AVAILABLE]
                  message:
                    type: string
                    example: "Helm is not available"
                  details:
                    type: string
                    example: "Helm requires Kubernetes to be installed and configured. Please ensure Kubernetes is running and accessible."
              data:
                type: object
                nullable: true

    HelmError:
      description: Helm operation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum: [HELM_ERROR]
                  message:
                    type: string
                    example: "Failed to list releases: connection refused"
              data:
                type: object
                nullable: true
  
  schemas:
    APIResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [success, error]
        data:
          type: object
          nullable: true
        error:
          $ref: '#/components/schemas/APIError'
          nullable: true
    
    APIError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
    
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            status:
              enum: [error]
    
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: |
            Username for authentication.
            - For development builds: 'admin' with password 'admin123' is available
            - For production builds: Only Linux system users are allowed
        password:
          type: string
          description: User password
    
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                expires_at:
                  type: integer
    
    MessageResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                message:
                  type: string

    CRDsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                crds:
                  type: array
                  items:
                    $ref: '#/components/schemas/CRDInfo'

    CRDInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the CRD
        group:
          type: string
          description: The API group of the CRD
        version:
          type: string
          description: The version of the CRD
        kind:
          type: string
          description: The kind of the custom resource
        scope:
          type: string
          description: The scope of the CRD (Namespaced or Cluster)
          enum: [Namespaced, Cluster]
        names:
          type: array
          items:
            type: string
          description: All accepted names for the CRD (plural, singular, shortNames)
        age:
          type: string
          description: Age of the CRD
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels attached to the CRD
        creationTimestamp:
          type: string
          format: date-time
          description: Timestamp when the CRD was created

    CRDDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                crd:
                  $ref: '#/components/schemas/CRDDetail'

    CRDDetail:
      allOf:
        - $ref: '#/components/schemas/CRDInfo'
        - type: object
          properties:
            spec:
              type: object
              properties:
                versions:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Version name
                      served:
                        type: boolean
                        description: Whether this version is served
                      storage:
                        type: boolean
                        description: Whether this version is the storage version
                      schema:
                        type: object
                        description: OpenAPI v3 schema for this version
                conversion:
                  type: object
                  properties:
                    strategy:
                      type: string
                      description: Conversion strategy
                preserveUnknownFields:
                  type: boolean
                  description: Whether unknown fields are preserved

    CRDObjectListResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                objects:
                  type: array
                  items:
                    $ref: '#/components/schemas/CRDObject'
                count:
                  type: integer

    CRDObjectDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CRDObjectDetail'

    CRDObject:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        kind:
          type: string
        apiVersion:
          type: string
        creationTimestamp:
          type: string
          format: date-time
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    CRDObjectDetail:
      allOf:
        - $ref: '#/components/schemas/CRDObject'
        - type: object
          properties:
            raw:
              type: object
              description: The full Kubernetes object data.
              additionalProperties: true
    
    Interface:
      type: object
      properties:
        name:
          type: string
        mac:
          type: string
        mtu:
          type: integer
        state:
          type: string
          enum: [up, down]
        type:
          type: string
        addresses:
          type: array
          items:
            type: string
        statistics:
          type: object
          properties:
            rx_bytes:
              type: integer
            tx_bytes:
              type: integer
            rx_packets:
              type: integer
            tx_packets:
              type: integer
            rx_errors:
              type: integer
            tx_errors:
              type: integer
    
    InterfacesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                interfaces:
                  type: array
                  items:
                    $ref: '#/components/schemas/Interface'
    
    AddressRequest:
      type: object
      required:
        - address
        - netmask
      properties:
        address:
          type: string
          format: ipv4
        netmask:
          type: integer
          minimum: 0
          maximum: 32
        gateway:
          type: string
          format: ipv4
    
    BridgeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        interfaces:
          type: array
          items:
            type: string
    
    BondRequest:
      type: object
      required:
        - name
        - mode
        - interfaces
      properties:
        name:
          type: string
        mode:
          type: string
        interfaces:
          type: array
          items:
            type: string
    
    VLANRequest:
      type: object
      required:
        - interface
        - vlan_id
      properties:
        interface:
          type: string
        vlan_id:
          type: integer
          minimum: 1
          maximum: 4094
        name:
          type: string
    
    Disk:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        size:
          type: integer
        model:
          type: string
        serial:
          type: string
        type:
          type: string
        removable:
          type: boolean
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/Partition'
    
    Partition:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        size:
          type: integer
        type:
          type: string
        filesystem:
          type: string
        mount_point:
          type: string
        used:
          type: integer
        available:
          type: integer
        use_percent:
          type: number
    
    DisksResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                disks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Disk'
    
    MountRequest:
      type: object
      required:
        - device
        - mount_point
      properties:
        device:
          type: string
        mount_point:
          type: string
        filesystem:
          type: string
        options:
          type: string
    
    UnmountRequest:
      type: object
      required:
        - mount_point
      properties:
        mount_point:
          type: string
        force:
          type: boolean
          default: false
    
    FormatRequest:
      type: object
      required:
        - device
        - filesystem
      properties:
        device:
          type: string
        filesystem:
          type: string
          enum: [ext4, ext3, ext2, xfs, btrfs]
        label:
          type: string
    
    User:
      type: object
      properties:
        username:
          type: string
        uid:
          type: string
        gid:
          type: string
        home:
          type: string
        shell:
          type: string
    
    UsersResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
    
    UserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        password:
          type: string
        groups:
          type: string
    
    PasswordResetRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          minLength: 6
          description: New password for the user (minimum 6 characters)
    
    LogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        priority:
          type: string
        unit:
          type: string
        message:
          type: string
        hostname:
          type: string
        pid:
          type: integer
    
    LogsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                logs:
                  type: array
                  items:
                    $ref: '#/components/schemas/LogEntry'
                total_count:
                  type: integer
                page:
                  type: integer
                page_size:
                  type: integer
    
    SystemSummaryResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                hostname:
                  type: string
                os:
                  type: string
                platform:
                  type: string
                platform_family:
                  type: string
                platform_version:
                  type: string
                kernel_version:
                  type: string
                uptime:
                  type: integer
                boot_time:
                  type: integer
                cpu_count:
                  type: integer
    
    HardwareResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                hostname:
                  type: string
                architecture:
                  type: string
                virtualization:
                  type: string
                role:
                  type: string
                kernel_version:
                  type: string
    
    MemoryResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                free:
                  type: integer
                used:
                  type: integer
                used_percent:
                  type: number
    
    CPUResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                model_name:
                  type: string
                cores:
                  type: integer
                load1:
                  type: number
                load5:
                  type: number
                load15:
                  type: number
    
    VolumeGroup:
      type: object
      properties:
        name:
          type: string
        size:
          type: integer
        free:
          type: integer
        pv_count:
          type: integer
        lv_count:
          type: integer
        uuid:
          type: string
    
    LogicalVolume:
      type: object
      properties:
        name:
          type: string
        vg_name:
          type: string
        size:
          type: integer
        path:
          type: string
        uuid:
          type: string
        attr:
          type: string
    
    PhysicalVolume:
      type: object
      properties:
        name:
          type: string
        vg_name:
          type: string
        size:
          type: integer
        free:
          type: integer
        uuid:
          type: string
    
    VolumeGroupsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                volume_groups:
                  type: array
                  items:
                    $ref: '#/components/schemas/VolumeGroup'
    
    LogicalVolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                logical_volumes:
                  type: array
                  items:
                    $ref: '#/components/schemas/LogicalVolume'
    
    PhysicalVolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                physical_volumes:
                  type: array
                  items:
                    $ref: '#/components/schemas/PhysicalVolume'
    
    CreateVGRequest:
      type: object
      required:
        - name
        - devices
      properties:
        name:
          type: string
        devices:
          type: array
          items:
            type: string
    
    CreateLVRequest:
      type: object
      required:
        - name
        - vg_name
        - size
      properties:
        name:
          type: string
        vg_name:
          type: string
        size:
          type: string
        filesystem:
          type: string
          enum: [ext4, ext3, ext2, xfs, btrfs]
    
    ISCSITarget:
      type: object
      properties:
        portal:
          type: string
        iqn:
          type: string
        name:
          type: string
        connected:
          type: boolean
    
    ISCSISession:
      type: object
      properties:
        target:
          type: string
        portal:
          type: string
        session_id:
          type: string
        state:
          type: string
    
    ISCSIDiscoverRequest:
      type: object
      required:
        - portal
      properties:
        portal:
          type: string
    
    ISCSITargetsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                targets:
                  type: array
                  items:
                    $ref: '#/components/schemas/ISCSITarget'
    
    ISCSISessionsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                sessions:
                  type: array
                  items:
                    $ref: '#/components/schemas/ISCSISession'
    
    ISCSILoginRequest:
      type: object
      required:
        - target
        - portal
      properties:
        target:
          type: string
        portal:
          type: string
        username:
          type: string
        password:
          type: string
    
    ISCSILogoutRequest:
      type: object
      required:
        - target
      properties:
        target:
          type: string
    
    MultipathDevice:
      type: object
      properties:
        name:
          type: string
        wwid:
          type: string
        vendor:
          type: string
        product:
          type: string
        size:
          type: string
        state:
          type: string
        paths:
          type: array
          items:
            $ref: '#/components/schemas/MultipathPath'
    
    MultipathPath:
      type: object
      properties:
        device:
          type: string
        host:
          type: string
        state:
          type: string
        priority:
          type: integer
        checker:
          type: string
    
    MultipathDevicesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/MultipathDevice'
    
    MultipathPathsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                paths:
                  type: array
                  items:
                    $ref: '#/components/schemas/MultipathPath'
    
    BTRFSSubvolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                subvolumes:
                  type: array
                  items:
                    type: string
    
    BTRFSSubvolumeRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: string
    
    BTRFSSnapshotRequest:
      type: object
      required:
        - source
        - destination
      properties:
        source:
          type: string
        destination:
          type: string
    
    RAIDDevice:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        level:
          type: string
        state:
          type: string
        size:
          type: integer
        devices:
          type: array
          items:
            type: string
        active_disks:
          type: integer
        total_disks:
          type: integer
        chunk_size:
          type: string
        uuid:
          type: string
    
    RAIDDisk:
      type: object
      properties:
        path:
          type: string
        size:
          type: integer
        partition:
          type: boolean
        device:
          type: string
    
    RAIDDevicesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/RAIDDevice'
    
    RAIDAvailableDisksResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                disks:
                  type: array
                  items:
                    $ref: '#/components/schemas/RAIDDisk'
    
    CreateRAIDRequest:
      type: object
      required:
        - name
        - level
        - disks
      properties:
        name:
          type: string
          description: Name of the RAID device (e.g., raid0)
        level:
          type: string
          enum: ['0', '1', '5', '6', '10']
          description: RAID level
        disks:
          type: array
          items:
            type: string
          minItems: 2
          description: List of disk paths to use for RAID
        chunk_size:
          type: string
          description: Chunk size (e.g., 512K, 1M)
          default: '512K'
    
    DestroyRAIDRequest:
      type: object
      required:
        - device
      properties:
        device:
          type: string
          description: RAID device path to destroy

    ContainerDetail:
      type: object
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            id:
              type: string
            name:
              type: string
            image:
              type: string
            image_id:
              type: string
            state:
              type: string
            status:
              type: string
            created_at:
              type: string
              format: date-time
            started_at:
              type: string
              format: date-time
              nullable: true
            finished_at:
              type: string
              format: date-time
              nullable: true
            exit_code:
              type: integer
              nullable: true
            pid:
              type: integer
            restart_count:
              type: integer
            command:
              type: array
              items:
                type: string
            args:
              type: array
              items:
                type: string
            env:
              type: array
              items:
                type: string
            mounts:
              type: array
              items:
                type: object
                properties:
                  source:
                    type: string
                  destination:
                    type: string
                  mode:
                    type: string
                  type:
                    type: string
                  read_only:
                    type: boolean
            ports:
              type: array
              items:
                type: object
                properties:
                  container_port:
                    type: integer
                  host_port:
                    type: integer
                  protocol:
                    type: string
                  host_ip:
                    type: string
            networks:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  id:
                    type: string
                  ip_address:
                    type: string
                  ip_prefix_len:
                    type: integer
                  gateway:
                    type: string
                  mac_address:
                    type: string
                  ipv6_address:
                    type: string
                  ipv6_gateway:
                    type: string
                  aliases:
                    type: array
                    items:
                      type: string
                  driver_opts:
                    type: object
                    additionalProperties:
                      type: string
            resources:
              type: object
              properties:
                cpu_shares:
                  type: integer
                cpu_quota:
                  type: integer
                cpu_period:
                  type: integer
                cpuset_cpus:
                  type: string
                cpuset_mems:
                  type: string
                memory_limit:
                  type: integer
                memory_reservation:
                  type: integer
                memory_swap:
                  type: integer
                memory_usage:
                  type: integer
                memory_max_usage:
                  type: integer
                cpu_usage_percent:
                  type: number
                  format: float
                pids_limit:
                  type: integer
                pids_current:
                  type: integer
                blkio_weight:
                  type: integer
                io_read_bytes:
                  type: integer
                io_write_bytes:
                  type: integer
                network_rx_bytes:
                  type: integer
                network_tx_bytes:
                  type: integer
            user:
              type: string
            working_dir:
              type: string
            hostname:
              type: string
            domain_name:
              type: string
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            config:
              type: object
              additionalProperties:
                type: object

    ImageDetail:
      type: object
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            id:
              type: string
            repo_tags:
              type: array
              items:
                type: string
            repo_digests:
              type: array
              items:
                type: string
            parent:
              type: string
            author:
              type: string
            architecture:
              type: string
            os:
              type: string
            variant:
              type: string
            created_at:
              type: string
              format: date-time
            size:
              type: integer
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            layers:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  size:
                    type: integer
                  created_at:
                    type: string
                    format: date-time
                  created_by:
                    type: string
                  comment:
                    type: string
            config:
              type: object
              properties:
                user:
                  type: string
                exposed_ports:
                  type: array
                  items:
                    type: string
                env:
                  type: array
                  items:
                    type: string
                cmd:
                  type: array
                  items:
                    type: string
                entrypoint:
                  type: array
                  items:
                    type: string
                volumes:
                  type: array
                  items:
                    type: string
                working_dir:
                  type: string
                stop_signal:
                  type: string
                labels:
                  type: object
                  additionalProperties:
                    type: string
            manifest:
              type: object
              additionalProperties:
                type: string

    ImageImportResult:
      type: object
      properties:
        image_id:
          type: string
          description: The ID of the imported image
          example: "sha256:abc123def456"
        repo_tags:
          type: array
          items:
            type: string
          description: Repository tags for the imported image
          example: ["my-app:latest"]
        size:
          type: integer
          format: int64
          description: Size of the imported image in bytes
          example: 125829120
        imported_at:
          type: string
          format: date-time
          description: Timestamp when the image was imported
          example: "2025-08-05T15:00:00Z"
        runtime:
          type: string
          description: Container runtime used for import
          example: "docker"
        status:
          type: string
          description: Import status
          enum: [success, failed]
          example: "success"
        message:
          type: string
          description: Additional information about the import operation
          example: "Loaded image: my-app:latest"

    # WebSocket Message Schemas
    WSAuthMessage:
      type: object
      required:
        - type
        - token
      properties:
        type:
          type: string
          enum: [auth]
        token:
          type: string
          description: JWT authentication token
    
    WSMetricsSubscribeMessage:
      type: object
      required:
        - type
        - metrics
      properties:
        type:
          type: string
          enum: [subscribe]
        metrics:
          type: array
          items:
            type: string
            enum: [cpu, memory, disk, network, load]
          description: List of metrics to subscribe to
    
    WSMetricsUnsubscribeMessage:
      type: object
      required:
        - type
        - metrics
      properties:
        type:
          type: string
          enum: [unsubscribe]
        metrics:
          type: array
          items:
            type: string
            enum: [cpu, memory, disk, network, load]
          description: List of metrics to unsubscribe from
    
    WSMetricMessage:
      type: object
      required:
        - type
        - metric
        - timestamp
        - data
      properties:
        type:
          type: string
          enum: [metric]
        metric:
          type: string
          enum: [cpu, memory, disk, network, load]
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          description: Metric-specific data
    
    WSLogsSubscribeMessage:
      type: object
      required:
        - type
        - filters
      properties:
        type:
          type: string
          enum: [subscribe]
        filters:
          type: object
          properties:
            services:
              type: array
              items:
                type: string
              description: Filter by service names
            priority:
              type: string
              enum: [emergency, alert, critical, error, warning, notice, info, debug]
              description: Minimum priority level
            follow:
              type: boolean
              default: true
              description: Whether to follow new logs
    
    WSLogMessage:
      type: object
      required:
        - type
        - timestamp
        - message
      properties:
        type:
          type: string
          enum: [log]
        timestamp:
          type: string
          format: date-time
        service:
          type: string
        priority:
          type: string
          enum: [emergency, alert, critical, error, warning, notice, info, debug]
        message:
          type: string
        hostname:
          type: string
        pid:
          type: integer
    
    WSTerminalStartMessage:
      type: object
      required:
        - type
        - cols
        - rows
      properties:
        type:
          type: string
          enum: [start]
        cols:
          type: integer
          minimum: 1
          description: Terminal width in columns
        rows:
          type: integer
          minimum: 1
          description: Terminal height in rows
        shell:
          type: string
          default: /bin/bash
          description: Shell to execute
    
    WSTerminalInputMessage:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [input]
        data:
          type: string
          description: Input data to send to terminal
    
    WSTerminalResizeMessage:
      type: object
      required:
        - type
        - cols
        - rows
      properties:
        type:
          type: string
          enum: [resize]
        cols:
          type: integer
          minimum: 1
          description: New terminal width in columns
        rows:
          type: integer
          minimum: 1
          description: New terminal height in rows
    
    WSTerminalOutputMessage:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [output]
        data:
          type: string
          description: Output data from terminal
    
    WSErrorMessage:
      type: object
      required:
        - type
        - error
      properties:
        type:
          type: string
          enum: [error]
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
    
    # Metric Data Schemas
    CPUMetricData:
      type: object
      properties:
        usage_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
        load1:
          type: number
          format: float
        load5:
          type: number
          format: float
        load15:
          type: number
          format: float
        cores:
          type: array
          items:
            type: object
            properties:
              core:
                type: integer
              usage_percent:
                type: number
                format: float
                minimum: 0
                maximum: 100
    
    MemoryMetricData:
      type: object
      properties:
        total:
          type: integer
          description: Total memory in bytes
        used:
          type: integer
          description: Used memory in bytes
        free:
          type: integer
          description: Free memory in bytes
        available:
          type: integer
          description: Available memory in bytes
        used_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
        swap_total:
          type: integer
          description: Total swap in bytes
        swap_used:
          type: integer
          description: Used swap in bytes
        swap_free:
          type: integer
          description: Free swap in bytes
        swap_used_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
    
    DiskMetricData:
      type: object
      properties:
        disks:
          type: array
          items:
            type: object
            properties:
              device:
                type: string
              mount_point:
                type: string
              filesystem:
                type: string
              total:
                type: integer
                description: Total space in bytes
              used:
                type: integer
                description: Used space in bytes
              free:
                type: integer
                description: Free space in bytes
              used_percent:
                type: number
                format: float
                minimum: 0
                maximum: 100
              io_stats:
                type: object
                properties:
                  read_bytes_per_sec:
                    type: number
                    format: float
                  write_bytes_per_sec:
                    type: number
                    format: float
                  read_ops_per_sec:
                    type: number
                    format: float
                  write_ops_per_sec:
                    type: number
                    format: float
    
    NetworkMetricData:
      type: object
      properties:
        interfaces:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              rx_bytes_per_sec:
                type: number
                format: float
              tx_bytes_per_sec:
                type: number
                format: float
              rx_packets_per_sec:
                type: number
                format: float
              tx_packets_per_sec:
                type: number
                format: float
              rx_errors:
                type: integer
              tx_errors:
                type: integer
              rx_dropped:
                type: integer
              tx_dropped:
                type: integer

    DockerContainersResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                containers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Container'

    DockerImagesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'

    DockerNetworksResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                networks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Network'

    DockerVolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                volumes:
                  type: array
                  items:
                    $ref: '#/components/schemas/Volume'

    Container:
      type: object
      properties:
        id:
          type: string
          description: Container ID
          example: "9c7c8a3b0123"
        names:
          type: array
          items:
            type: string
          description: Container names
          example: ["my-container"]
        image:
          type: string
          description: Image name
          example: "nginx:latest"
        imageId:
          type: string
          description: Image ID
          example: "sha256:abcd1234"
        command:
          type: string
          description: Command being run
          example: "nginx -g 'daemon off;'"
        created:
          type: string
          format: date-time
          description: Container creation time
        state:
          type: string
          description: Container state
          example: "running"
        status:
          type: string
          description: Container status
          example: "Up 2 hours"
        ports:
          type: array
          items:
            $ref: '#/components/schemas/Port'
          description: Port mappings
        labels:
          type: object
          additionalProperties:
            type: string
          description: Container labels
        sizeRw:
          type: integer
          format: int64
          description: Size of files that have been created or changed
        sizeRootFs:
          type: integer
          format: int64
          description: Total size of all the files in the container
        hostConfig:
          $ref: '#/components/schemas/HostConfig'
        networkSettings:
          $ref: '#/components/schemas/NetworkSettings'
        mounts:
          type: array
          items:
            $ref: '#/components/schemas/Mount'
          description: Container mounts

    Port:
      type: object
      properties:
        ip:
          type: string
          description: Host IP address
          example: "0.0.0.0"
        privatePort:
          type: integer
          description: Container port
          example: 80
        publicPort:
          type: integer
          description: Host port
          example: 8080
        type:
          type: string
          description: Port type
          example: "tcp"

    HostConfig:
      type: object
      properties:
        networkMode:
          type: string
          description: Network mode
          example: "bridge"

    NetworkSettings:
      type: object
      properties:
        networks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NetworkInfo'
          description: Network configurations

    NetworkInfo:
      type: object
      properties:
        networkId:
          type: string
          description: Network ID
        endpointId:
          type: string
          description: Endpoint ID
        gateway:
          type: string
          description: Gateway IP
        ipAddress:
          type: string
          description: Container IP address
        ipPrefixLen:
          type: integer
          description: IP prefix length
        ipv6Gateway:
          type: string
          description: IPv6 gateway
        macAddress:
          type: string
          description: MAC address

    Mount:
      type: object
      properties:
        type:
          type: string
          description: Mount type
          example: "bind"
        source:
          type: string
          description: Source path
          example: "/host/path"
        destination:
          type: string
          description: Destination path in container
          example: "/container/path"
        mode:
          type: string
          description: Mount mode
          example: "rw"
        rw:
          type: boolean
          description: Read-write flag
        propagation:
          type: string
          description: Mount propagation
          example: "rprivate"

    Image:
      type: object
      properties:
        id:
          type: string
          description: Image ID
          example: "sha256:abcd1234"
        parentId:
          type: string
          description: Parent image ID
        repoTags:
          type: array
          items:
            type: string
          description: Repository tags
          example: ["nginx:latest"]
        repoDigests:
          type: array
          items:
            type: string
          description: Repository digests
        created:
          type: string
          format: date-time
          description: Image creation time
        size:
          type: integer
          format: int64
          description: Image size in bytes
        virtualSize:
          type: integer
          format: int64
          description: Virtual size in bytes
        sharedSize:
          type: integer
          format: int64
          description: Shared size in bytes
        labels:
          type: object
          additionalProperties:
            type: string
          description: Image labels
        containers:
          type: integer
          format: int64
          description: Number of containers using this image

    Network:
      type: object
      properties:
        id:
          type: string
          description: Network ID
          example: "bridge"
        name:
          type: string
          description: Network name
          example: "bridge"
        driver:
          type: string
          description: Network driver
          example: "bridge"
        created:
          type: string
          format: date-time
          description: Network creation time
        scope:
          type: string
          description: Network scope
          example: "local"
        enableIPv6:
          type: boolean
          description: IPv6 enabled flag
        ipam:
          $ref: '#/components/schemas/IPAM'
        internal:
          type: boolean
          description: Internal network flag
        attachable:
          type: boolean
          description: Attachable flag
        ingress:
          type: boolean
          description: Ingress flag
        configOnly:
          type: boolean
          description: Config-only flag
        options:
          type: object
          additionalProperties:
            type: string
          description: Network options
        labels:
          type: object
          additionalProperties:
            type: string
          description: Network labels
        containers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NetworkInfo'
          description: Connected containers

    IPAM:
      type: object
      properties:
        driver:
          type: string
          description: IPAM driver
          example: "default"
        options:
          type: object
          additionalProperties:
            type: string
          description: IPAM options
        config:
          type: array
          items:
            $ref: '#/components/schemas/IPAMConfig'
          description: IPAM configuration

    IPAMConfig:
      type: object
      properties:
        subnet:
          type: string
          description: Subnet CIDR
          example: "172.18.0.0/16"
        ipRange:
          type: string
          description: IP range CIDR
        gateway:
          type: string
          description: Gateway IP
          example: "172.18.0.1"
        auxAddress:
          type: object
          additionalProperties:
            type: string
          description: Auxiliary IP addresses

    Volume:
      type: object
      properties:
        name:
          type: string
          description: Volume name
          example: "my-volume"
        driver:
          type: string
          description: Volume driver
          example: "local"
        mountpoint:
          type: string
          description: Volume mount point
          example: "/var/lib/docker/volumes/my-volume/_data"
        createdAt:
          type: string
          format: date-time
          description: Volume creation time
        labels:
          type: object
          additionalProperties:
            type: string
          description: Volume labels
        scope:
          type: string
          description: Volume scope
          example: "local"
        options:
          type: object
          additionalProperties:
            type: string
          description: Volume options
        usageData:
          $ref: '#/components/schemas/VolumeUsageData'

    VolumeUsageData:
      type: object
      properties:
        size:
          type: integer
          format: int64
          description: Volume size in bytes
        refCount:
          type: integer
          format: int64
          description: Reference count

    # Kubernetes Resource Response Schemas
    PodsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pods:
                  type: array
                  items:
                    $ref: '#/components/schemas/PodInfo'

    DeploymentsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                deployments:
                  type: array
                  items:
                    $ref: '#/components/schemas/DeploymentInfo'

    ServicesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                services:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServiceInfo'

    IngressesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                ingresses:
                  type: array
                  items:
                    $ref: '#/components/schemas/IngressInfo'

    PVCsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pvcs:
                  type: array
                  items:
                    $ref: '#/components/schemas/PVCInfo'

    PVsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pvs:
                  type: array
                  items:
                    $ref: '#/components/schemas/PVInfo'

    SecretsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                secrets:
                  type: array
                  items:
                    $ref: '#/components/schemas/SecretInfo'

    ConfigMapsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                configmaps:
                  type: array
                  items:
                    $ref: '#/components/schemas/ConfigMapInfo'

    NamespacesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                namespaces:
                  type: array
                  items:
                    $ref: '#/components/schemas/NamespaceInfo'

    NodesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                nodes:
                  type: array
                  items:
                    $ref: '#/components/schemas/NodeInfo'

    DaemonSetsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                daemonsets:
                  type: array
                  items:
                    $ref: '#/components/schemas/DaemonSetInfo'

    StatefulSetsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                statefulsets:
                  type: array
                  items:
                    $ref: '#/components/schemas/StatefulSetInfo'

    JobsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                jobs:
                  type: array
                  items:
                    $ref: '#/components/schemas/JobInfo'

    CronJobsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                cronjobs:
                  type: array
                  items:
                    $ref: '#/components/schemas/CronJobInfo'

    ClusterInfoResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                cluster:
                  $ref: '#/components/schemas/ClusterInfo'

    # Kubernetes Resource Info Schemas
    PodInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        status:
          type: string
        ready:
          type: string
        restarts:
          type: integer
        age:
          type: string
        ip:
          type: string
        node:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    DeploymentInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        ready:
          type: string
        up_to_date:
          type: integer
        available:
          type: integer
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    ServiceInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        type:
          type: string
        cluster_ip:
          type: string
        external_ip:
          type: string
        ports:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    IngressInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        class:
          type: string
        hosts:
          type: string
        address:
          type: string
        ports:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    PVCInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        status:
          type: string
        volume:
          type: string
        capacity:
          type: string
        access_modes:
          type: string
        storage_class:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    PVInfo:
      type: object
      properties:
        name:
          type: string
        capacity:
          type: string
        access_modes:
          type: string
        reclaim_policy:
          type: string
        status:
          type: string
        claim:
          type: string
        storage_class:
          type: string
        reason:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    SecretInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        type:
          type: string
        data:
          type: integer
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    ConfigMapInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        data:
          type: integer
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    NamespaceInfo:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    NodeInfo:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        roles:
          type: string
        age:
          type: string
        version:
          type: string
        internal_ip:
          type: string
        external_ip:
          type: string
        os_image:
          type: string
        kernel_version:
          type: string
        container_runtime:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    DaemonSetInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        desired:
          type: integer
        current:
          type: integer
        ready:
          type: integer
        up_to_date:
          type: integer
        available:
          type: integer
        node_selector:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    StatefulSetInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        ready:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    JobInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        completions:
          type: string
        duration:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    CronJobInfo:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        schedule:
          type: string
        suspend:
          type: boolean
        active:
          type: integer
        last_schedule:
          type: string
        age:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string

    ClusterInfo:
      type: object
      properties:
        version:
          type: string
        platform:
          type: string
        nodes:
          type: integer
        namespaces:
          type: integer
        pods:
          type: integer
        services:
          type: integer

    # Container action and detail response schemas
    ContainerDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              description: Detailed container information from Docker daemon
              # The data contains the raw Docker ContainerJSON object
              # which has extensive details about the container

    ContainerActionResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                containerId:
                  type: string
                  description: Container ID that the action was performed on
                  example: "abc123def456"
                action:
                  type: string
                  description: Action that was performed
                  enum: [start, stop, remove]
                  example: "start"
                message:
                  type: string
                  description: Human-readable message about the action result
                  example: "Container started successfully"
                success:
                  type: boolean
                  description: Whether the action was successful
                  example: true

    ContainerLogsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                containerId:
                  type: string
                  description: Container ID that logs were retrieved from
                  example: "abc123def456"
                logs:
                  type: string
                  description: Container logs output
                  example: "2025-08-04T12:00:00.000Z Starting application...\n2025-08-04T12:00:01.000Z Server listening on port 8080\n"

    ImageActionResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                imageId:
                  type: string
                  description: Image ID that the action was performed on
                  example: "sha256:abc123def456"
                action:
                  type: string
                  description: Action that was performed
                  enum: [remove]
                  example: "remove"
                message:
                  type: string
                  description: Human-readable message about the action result
                  example: "Image removed successfully"
                success:
                  type: boolean
                  description: Whether the action was successful
                  example: true

    VolumeActionResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                volumeId:
                  type: string
                  description: Volume ID that the action was performed on
                  example: "my-volume"
                action:
                  type: string
                  description: Action that was performed
                  enum: [remove]
                  example: "remove"
                message:
                  type: string
                  description: Human-readable message about the action result
                  example: "Volume removed successfully"
                success:
                  type: boolean
                  description: Whether the action was successful
                  example: true

    NetworkActionResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                networkId:
                  type: string
                  description: Network ID that the action was performed on
                  example: "bridge"
                action:
                  type: string
                  description: Action that was performed
                  enum: [remove]
                  example: "remove"
                message:
                  type: string
                  description: Human-readable message about the action result
                  example: "Network removed successfully"
                success:
                  type: boolean
                  description: Whether the action was successful
                  example: true

    ContainerCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Optional container name
          example: my-container
        image:
          type: string
          description: Docker image to use for the container
          example: "nginx:latest"
        cmd:
          type: array
          items:
            type: string
          description: Command to run in the container
          example: ["nginx", "-g", "daemon off;"]
        env:
          type: array
          items:
            type: string
          description: List of environment variables to set in the container
          example: ["ENV=production", "DEBUG=false"]
        exposedPorts:
          type: object
          additionalProperties: {}
          description: Ports to expose from the container
          example:
            "80/tcp": {}
        portBindings:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                hostPort:
                  type: string
          description: Port mappings for exposed container ports
          example:
            "80/tcp":
              - hostPort: "8080"
        labels:
          type: object
          additionalProperties:
            type: string
          description: Metadata labels assigned to the container
        workingDir:
          type: string
          description: Working directory in the container
          example: /app
        volumes:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
              target:
                type: string
              type:
                type: string
              readOnly:
                type: boolean
              bindOptions:
                type: object
                properties:
                  propagation:
                    type: string
            example:
              source: "/var/www"
              target: "/usr/share/nginx/html"
              type: "bind"
              readOnly: false
        networkMode:
          type: string
          description: Which network to connect container to
          example: bridge
        restartPolicy:
          type: object
          properties:
            name:
              type: string
              description: Restart policy to apply when a container exits
              example: "always"
            maximumRetryCount:
              type: integer
              description: Maximum retry count for 'on-failure' policy

    ContainerCreateResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                containerId:
                  type: string
                  description: ID of the created container
                  example: "8dfafdbc3a40"
                warnings:
                  type: array
                  items:
                    type: string
                  description: Any warnings generated from container creation

    ImagePullRequest:
      type: object
      properties:
        imageName:
          type: string
          description: Name of the image to pull
          example: "nginx"
        tag:
          type: string
          description: Tag of the image to pull
          example: "latest"

    ImagePullResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                imageName:
                  type: string
                  description: Name of the pulled image
                  example: "nginx:latest"

    # Helm Response Schemas
    HelmReleasesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                releases:
                  type: array
                  items:
                    $ref: '#/components/schemas/HelmRelease'
                count:
                  type: integer
                  description: Number of releases returned
                  example: 3

    HelmChartsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                charts:
                  type: array
                  items:
                    $ref: '#/components/schemas/HelmChart'
                count:
                  type: integer
                  description: Number of charts returned
                  example: 6

    HelmRelease:
      type: object
      properties:
        name:
          type: string
          description: Name of the Helm release
          example: "nginx-release"
        namespace:
          type: string
          description: Kubernetes namespace where the release is deployed
          example: "default"
        version:
          type: integer
          description: Release revision number
          example: 1
        status:
          type: string
          description: Current status of the release
          enum: [unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade, pending-rollback]
          example: "deployed"
        chart:
          type: string
          description: Name of the Helm chart
          example: "nginx"
        chart_version:
          type: string
          description: Version of the Helm chart
          example: "1.0.0"
        app_version:
          type: string
          description: Version of the application being deployed
          example: "1.21.0"
        updated:
          type: string
          format: date-time
          description: Last update time of the release
          example: "2025-08-05T12:00:00Z"
        description:
          type: string
          description: Description of the release
          example: "Install complete"
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels attached to the release
          example:
            app.kubernetes.io/managed-by: "Helm"

    HelmChart:
      type: object
      properties:
        name:
          type: string
          description: Name of the Helm chart
          example: "bitnami/nginx"
        version:
          type: string
          description: Version of the chart
          example: "13.2.23"
        description:
          type: string
          description: Description of the chart
          example: "NGINX Open Source plus a number of useful modules"
        repository:
          type: string
          description: Repository containing the chart
          example: "bitnami"
        app_version:
          type: string
          description: Version of the application being deployed
          example: "1.25.3"

    HelmRepositoriesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                repositories:
                  type: array
                  items:
                    $ref: '#/components/schemas/HelmRepository'
                count:
                  type: integer
                  description: Number of repositories returned
                  example: 2

    HelmRepository:
      type: object
      properties:
        name:
          type: string
          description: Name of the Helm repository
          example: "bitnami"
        url:
          type: string
          description: URL of the Helm repository
          example: "https://charts.bitnami.com/bitnami"

    # Kubernetes Resource Detail Response Schemas
    PodDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/PodDetail'

    DeploymentDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/DeploymentDetail'

    ServiceDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ServiceInfo'

    IngressDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/IngressInfo'

    PVCDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/PVCInfo'

    PVDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/PVInfo'

    SecretDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SecretInfo'

    ConfigMapDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ConfigMapInfo'

    NamespaceDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/NamespaceInfo'

    NodeDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/NodeInfo'

    DaemonSetDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/DaemonSetInfo'

    StatefulSetDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/StatefulSetInfo'

    JobDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/JobInfo'

    CronJobDetailResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CronJobInfo'

    # Pod Detail Schema (already exists but adding reference here for completeness)
    PodDetail:
      type: object
      properties:
        name:
          type: string
          description: Pod name
        namespace:
          type: string
          description: Pod namespace
        uid:
          type: string
          description: Pod UID
        resource_version:
          type: string
          description: Resource version
        labels:
          type: object
          additionalProperties:
            type: string
          description: Pod labels
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Pod annotations
        status:
          type: string
          description: Pod status
        phase:
          type: string
          description: Pod phase
        ip:
          type: string
          description: Pod IP address
        host_ip:
          type: string
          description: Host IP address
        node:
          type: string
          description: Node name where pod is running
        service_account:
          type: string
          description: Service account name
        restart_policy:
          type: string
          description: Restart policy
        dns_policy:
          type: string
          description: DNS policy
        node_selector:
          type: object
          additionalProperties:
            type: string
          description: Node selector
        tolerations:
          type: array
          items:
            type: object
          description: Pod tolerations
        containers:
          type: array
          items:
            $ref: '#/components/schemas/ContainerInfo'
          description: Container information
        init_containers:
          type: array
          items:
            $ref: '#/components/schemas/ContainerInfo'
          description: Init container information
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/PodCondition'
          description: Pod conditions
        qos_class:
          type: string
          description: QoS class
        start_time:
          type: string
          format: date-time
          description: Pod start time
        creation_timestamp:
          type: string
          format: date-time
          description: Pod creation timestamp
        age:
          type: string
          description: Pod age

    ContainerInfo:
      type: object
      properties:
        name:
          type: string
          description: Container name
        image:
          type: string
          description: Container image
        ready:
          type: boolean
          description: Container ready status
        restart_count:
          type: integer
          description: Container restart count
        state:
          type: string
          description: Container state
        state_reason:
          type: string
          description: Container state reason

    PodCondition:
      type: object
      properties:
        type:
          type: string
          description: Condition type
        status:
          type: string
          description: Condition status
        last_probe_time:
          type: string
          format: date-time
          description: Last probe time
        last_transition_time:
          type: string
          format: date-time
          description: Last transition time
        reason:
          type: string
          description: Condition reason
        message:
          type: string
          description: Condition message

    DeploymentDetail:
      type: object
      properties:
        name:
          type: string
          description: Deployment name
        namespace:
          type: string
          description: Deployment namespace
        uid:
          type: string
          description: Deployment UID
        creationTimestamp:
          type: string
          format: date-time
          description: Creation timestamp
        labels:
          type: object
          additionalProperties:
            type: string
          description: Deployment labels
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Deployment annotations
        age:
          type: string
          description: Age of the deployment
        spec:
          type: object
          properties:
            replicas:
              type: integer
              description: Number of desired pods
            selector:
              type: object
              properties:
                matchLabels:
                  type: object
                  additionalProperties:
                    type: string
                  description: Label selector for pods
                matchExpressions:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      operator:
                        type: string
                      values:
                        type: array
                        items:
                          type: string
                  description: Label selector expressions
            strategy:
              type: object
              properties:
                type:
                  type: string
                  description: Type of deployment strategy
                  enum: [Recreate, RollingUpdate]
                rollingUpdate:
                  type: object
                  properties:
                    maxUnavailable:
                      type: string
                      description: Maximum number of pods that can be unavailable during update
                    maxSurge:
                      type: string
                      description: Maximum number of pods that can be created over the desired number
                  description: Rolling update configuration
              description: Deployment strategy
            revisionHistoryLimit:
              type: integer
              description: Number of old ReplicaSets to retain
            progressDeadlineSeconds:
              type: integer
              description: Maximum time in seconds for a deployment to make progress
            paused:
              type: boolean
              description: Whether the deployment is paused
        status:
          type: object
          properties:
            replicas:
              type: integer
              description: Total number of non-terminated pods targeted
            updatedReplicas:
              type: integer
              description: Total number of non-terminated pods targeted with desired template spec
            readyReplicas:
              type: integer
              description: Total number of ready pods targeted
            availableReplicas:
              type: integer
              description: Total number of available pods targeted
            unavailableReplicas:
              type: integer
              description: Total number of unavailable pods targeted
            observedGeneration:
              type: integer
              description: Most recent generation observed
          description: Deployment status
        containers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Container name
              image:
                type: string
                description: Container image
              command:
                type: array
                items:
                  type: string
                description: Container command
              args:
                type: array
                items:
                  type: string
                description: Container arguments
              workingDir:
                type: string
                description: Container working directory
              ports:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    containerPort:
                      type: integer
                    protocol:
                      type: string
                description: Container ports
              env:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    valueFrom:
                      type: object
                description: Environment variables
              resources:
                type: object
                properties:
                  limits:
                    type: object
                    additionalProperties:
                      type: string
                  requests:
                    type: object
                    additionalProperties:
                      type: string
                description: Resource requirements
              volumeMounts:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    mountPath:
                      type: string
                    readOnly:
                      type: boolean
                    subPath:
                      type: string
                description: Volume mounts
              livenessProbe:
                type: object
                description: Liveness probe configuration
              readinessProbe:
                type: object
                description: Readiness probe configuration
              startupProbe:
                type: object
                description: Startup probe configuration
              imagePullPolicy:
                type: string
                description: Image pull policy
                enum: [Always, Never, IfNotPresent]
          description: Container specifications
        initContainers:
          type: array
          items:
            type: object
          description: Init container specifications
        volumes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Volume name
              configMap:
                type: object
                properties:
                  name:
                    type: string
                description: ConfigMap volume source
              secret:
                type: object
                properties:
                  secretName:
                    type: string
                description: Secret volume source
              persistentVolumeClaim:
                type: object
                properties:
                  claimName:
                    type: string
                description: PVC volume source
              hostPath:
                type: object
                properties:
                  path:
                    type: string
                description: HostPath volume source
              emptyDir:
                type: object
                description: EmptyDir volume source
          description: Pod volumes
        strategy:
          type: object
          properties:
            type:
              type: string
              description: Type of deployment strategy
              enum: [Recreate, RollingUpdate]
            rollingUpdate:
              type: object
              properties:
                maxUnavailable:
                  type: string
                  description: Maximum number of pods that can be unavailable
                maxSurge:
                  type: string
                  description: Maximum number of pods that can be created over desired
          description: Update strategy
        conditions:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Type of deployment condition
              status:
                type: string
                description: Status of the condition
                enum: ["True", "False", "Unknown"]
              lastUpdateTime:
                type: string
                format: date-time
                description: Last time the condition was updated
              lastTransitionTime:
                type: string
                format: date-time
                description: Last time the condition transitioned
              reason:
                type: string
                description: Reason for the condition's last transition
              message:
                type: string
                description: Human-readable message about the transition
          description: Current conditions
        podTemplate:
          type: object
          properties:
            restartPolicy:
              type: string
              description: Restart policy for pods
              enum: [Always, OnFailure, Never]
            dnsPolicy:
              type: string
              description: DNS policy for pods
            serviceAccountName:
              type: string
              description: Service account name
            securityContext:
              type: object
              description: Pod security context
            affinity:
              type: object
              description: Pod affinity rules
            tolerations:
              type: array
              items:
                type: object
              description: Pod tolerations
          description: Pod template specification
