openapi: 3.1.0
info:
  title: Go System API
  version: 1.0.0
  description: RESTful API for Linux system management
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
paths:
  /auth/login:
    post:
      summary: Authenticate user
      description: |
        Authenticate a user and receive a JWT token.
        
        **Authentication Methods:**
        1. Built-in admin account (development builds only):
           - Username: admin
           - Password: admin123
           - Note: Disabled in production builds for security
        
        2. Linux system users (recommended for production):
           - Any valid Linux user with their system credentials
           - Uses system authentication via 'su' command
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /network/interfaces:
    get:
      summary: List network interfaces
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of interfaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfacesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/interfaces/{name}/up:
    put:
      summary: Bring interface up
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interface brought up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/interfaces/{name}/down:
    put:
      summary: Bring interface down
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interface brought down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/interfaces/{name}/address:
    post:
      summary: Configure IP address
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '200':
          description: Address configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
    put:
      summary: Update IP address
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
    delete:
      summary: Delete IP address
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: query
          required: true
          schema:
            type: string
            format: ipv4
      responses:
        '200':
          description: Address deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Interface or address not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bridges:
    get:
      summary: List network bridges
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bridges
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bridges:
                        type: array
                        items:
                          $ref: '#/components/schemas/Interface'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bridge:
    post:
      summary: Create network bridge
      tags:
        - Network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeRequest'
      responses:
        '200':
          description: Bridge created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: Bridge already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bridge/{name}:
    put:
      summary: Update network bridge
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeRequest'
      responses:
        '200':
          description: Bridge updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bridge not found
        '400':
          description: Not a bridge interface
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete network bridge
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bridge deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bridge not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bonds:
    get:
      summary: List network bonds
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bonds
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bonds:
                        type: array
                        items:
                          $ref: '#/components/schemas/Interface'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bond:
    post:
      summary: Create network bond
      tags:
        - Network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BondRequest'
      responses:
        '200':
          description: Bond created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: Bond already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/bond/{name}:
    put:
      summary: Update network bond
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BondRequest'
      responses:
        '200':
          description: Bond updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bond not found
        '400':
          description: Not a bond interface
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete network bond
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bond deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Bond not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/vlans:
    get:
      summary: List VLAN interfaces
      tags:
        - Network
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of VLANs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      vlans:
                        type: array
                        items:
                          $ref: '#/components/schemas/Interface'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/vlan:
    post:
      summary: Create VLAN interface
      tags:
        - Network
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLANRequest'
      responses:
        '200':
          description: VLAN created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: VLAN already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /network/vlan/{name}:
    put:
      summary: Update VLAN interface
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLANRequest'
      responses:
        '200':
          description: VLAN updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: VLAN not found
        '400':
          description: Not a VLAN interface
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete VLAN interface
      tags:
        - Network
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: VLAN deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: VLAN not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/disks:
    get:
      summary: List storage disks
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of disks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisksResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/mount:
    post:
      summary: Mount filesystem
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MountRequest'
      responses:
        '200':
          description: Filesystem mounted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Device not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/unmount:
    post:
      summary: Unmount filesystem
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnmountRequest'
      responses:
        '200':
          description: Filesystem unmounted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/format:
    post:
      summary: Format disk
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatRequest'
      responses:
        '200':
          description: Disk formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Device not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/vgs:
    get:
      summary: List LVM volume groups
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Volume groups listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeGroupsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/lvs:
    get:
      summary: List LVM logical volumes
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logical volumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalVolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/pvs:
    get:
      summary: List LVM physical volumes
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Physical volumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalVolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/vg:
    post:
      summary: Create LVM volume group
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVGRequest'
      responses:
        '200':
          description: Volume group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/lvm/lv:
    post:
      summary: Create LVM logical volume
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLVRequest'
      responses:
        '200':
          description: Logical volume created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/iscsi/discover:
    post:
      summary: Discover iSCSI targets
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ISCSIDiscoverRequest'
      responses:
        '200':
          description: Targets discovered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISCSITargetsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /containers:
    get:
      summary: List containers
      tags:
        - Container
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Containers listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      containers:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 2309b08a1303d054769d3adba93ac148c6cc31748a6dbecda5b12156028b034c
                            name:
                              type: string
                              example: reloader
                            image:
                              type: string
                              example: sha256:5ea6cbf6dee9b4b67edbd108986d75c5958273e6f6faaf0c18e734572b6b8821
                            state:
                              type: string
                              example: CONTAINER_RUNNING
                            status:
                              type: string
                              example: CONTAINER_RUNNING
                            created_at:
                              type: string
                              format: date-time
                              example: "2025-07-25T09:38:51.086238448Z"
                            labels:
                              type: object
                              additionalProperties:
                                type: string
                              example: {"io.kubernetes.container.name": "reloader"}
                            runtime:
                              type: string
                              example: containerd
                      count:
                        type: integer
                        example: 151
                      runtime:
                        type: string
                        example: containerd
                  error:
                    type: object
      '503':
        description: No container runtime available
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: error
                error:
                  type: object
                  properties:
                    code:
                      type: string
                      example: NO_RUNTIME_AVAILABLE
                    message:
                      type: string
                      example: "No container runtime found. Tried CRI sockets ([/run/containerd/containerd.sock /var/run/crio/crio.sock]) and Docker. Last error: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?"

  /containers/{id}:
    get:
      summary: Get detailed container information
      tags:
        - Container
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID
          schema:
            type: string
      responses:
        '200':
          description: Container details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      container:
                        $ref: '#/components/schemas/ContainerDetail'
                      runtime:
                        type: string
                        example: docker
                      execution_context:
                        type: object
                        properties:
                          directory_state:
                            type: object
                            properties:
                              pwd:
                                type: string
                                example: /Users/kandar/Workspaces/vapor/api
                              home:
                                type: string
                                example: /Users/kandar
                          operating_system:
                            type: object
                            properties:
                              platform:
                                type: string
                                example: MacOS
                          current_time:
                            type: string
                            format: date-time
                            example: '2025-08-02T06:33:19Z'
                          shell:
                            type: object
                            properties:
                              name:
                                type: string
                                example: zsh
                              version:
                                type: string
                                example: '5.9'
        '400':
          description: Invalid container ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to get container details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /containers/{id}/logs:
    get:
      summary: Get container logs
      tags:
        - Container
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Container ID
          schema:
            type: string
      responses:
        '200':
          description: Container logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      container_id:
                        type: string
                        example: abc123def456
                      logs:
                        type: string
                        description: Container logs output
                        example: "2025-08-02T09:00:00.000Z Started application\n2025-08-02T09:00:01.000Z Listening on port 8080\n"
                      runtime:
                        type: string
                        example: docker
                  error:
                    type: object
                    nullable: true
        '400':
          description: Invalid container ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: INVALID_ID
                  message: Container ID is required
        '500':
          description: Failed to get container logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: CONTAINER_LOGS_ERROR
                  message: failed to get container logs
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                error:
                  code: NO_RUNTIME_AVAILABLE
                  message: No container runtime found

  /images:
    get:
      summary: List images
      tags:
        - Container
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Images listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      images:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: sha256:d12fc38c77e50eab23af17f302d5b94514173d9f84150b7662aecbfeb21f8717
                            repo_tags:
                              type: array
                              items:
                                type: string
                              example: ["r.awan.app/library/remote-console-ipmi:2.0"]
                            repo_digests:
                              type: array
                              items:
                                type: string
                              example: ["quay.io/operatorhubio/catalog@sha256:096fa413e1b8dba2071020e5809597e7d86da5a2833ffdf97a20457af714e678"]
                            size:
                              type: integer
                              example: 109999465
                            created_at:
                              type: string
                              format: date-time
                              example: "2025-08-01T12:40:55.236465486Z"
                            runtime:
                              type: string
                              example: containerd
                      count:
                        type: integer
                        example: 92
                      runtime:
                        type: string
                        example: containerd
                  error:
                    type: object
      '503':
        description: No container runtime available
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: error
                error:
                  type: object
                  properties:
                    code:
                      type: string
                      example: NO_RUNTIME_AVAILABLE
                    message:
                      type: string
                      example: "No container runtime found. Tried CRI sockets ([/run/containerd/containerd.sock /var/run/crio/crio.sock]) and Docker. Last error: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?"

  /images/{id}:
    get:
      summary: Get detailed image information
      tags:
        - Container
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Image ID
          schema:
            type: string
      responses:
        '200':
          description: Image details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      image:
                        $ref: '#/components/schemas/ImageDetail'
                      runtime:
                        type: string
                        example: docker
        '400':
          description: Invalid image ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to get image details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: No container runtime available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /storage/iscsi/sessions:
    get:
      summary: List iSCSI sessions
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sessions listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISCSISessionsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/iscsi/login:
    post:
      summary: Login to iSCSI target
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ISCSILoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/iscsi/logout:
    post:
      summary: Logout from iSCSI target
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ISCSILogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/multipath/devices:
    get:
      summary: List multipath devices
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Multipath devices listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipathDevicesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/multipath/paths:
    get:
      summary: List multipath paths
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Multipath paths listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipathPathsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/btrfs/subvolumes:
    get:
      summary: List BTRFS subvolumes
      tags:
        - Storage
      security:
        - bearerAuth: []
      parameters:
        - name: mount_point
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Subvolumes listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BTRFSSubvolumesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/btrfs/subvolume:
    post:
      summary: Create BTRFS subvolume
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BTRFSSubvolumeRequest'
      responses:
        '200':
          description: Subvolume created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete BTRFS subvolume
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BTRFSSubvolumeRequest'
      responses:
        '200':
          description: Subvolume deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/btrfs/snapshot:
    post:
      summary: Create BTRFS snapshot
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BTRFSSnapshotRequest'
      responses:
        '200':
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/devices:
    get:
      summary: List RAID devices
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: RAID devices listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RAIDDevicesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/available-disks:
    get:
      summary: Get available disks for RAID
      tags:
        - Storage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Available disks listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RAIDAvailableDisksResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/create:
    post:
      summary: Create RAID device
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRAIDRequest'
      responses:
        '200':
          description: RAID device created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid request or validation error
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /storage/raid/destroy:
    post:
      summary: Destroy RAID device
      tags:
        - Storage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroyRAIDRequest'
      responses:
        '200':
          description: RAID device destroyed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users:
    get:
      summary: List users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      summary: Create user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /users/{username}:
    put:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /users/{username}/reset-password:
    post:
      summary: Reset user password
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user whose password to reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (invalid password format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not implemented (on non-Linux systems)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /logs:
    get:
      summary: Query system logs
      tags:
        - Logs
      security:
        - bearerAuth: []
      parameters:
        - name: service
          in: query
          schema:
            type: string
          description: Filter by service name
        - name: priority
          in: query
          schema:
            type: string
            enum: [emergency, alert, critical, error, warning, notice, info, debug]
          description: Filter by priority
        - name: since
          in: query
          schema:
            type: string
          description: Show logs since timestamp
        - name: until
          in: query
          schema:
            type: string
          description: Show logs until timestamp
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 100
            maximum: 1000
      responses:
        '200':
          description: Log entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/summary:
    get:
      summary: Get system summary
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSummaryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/hardware:
    get:
      summary: Get hardware information
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Hardware information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HardwareResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/memory:
    get:
      summary: Get memory information
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Memory information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /system/cpu:
    get:
      summary: Get CPU information
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: CPU information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CPUResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /ws/metrics:
    get:
      summary: WebSocket endpoint for live system metrics
      description: |
        Establish a WebSocket connection to receive real-time system metrics.
        
        **WebSocket URL**: `ws://localhost:8080/ws/metrics`
        
        **Authentication**: Send JWT token in the first message after connection:
        ```json
        {
          "type": "auth",
          "payload": {
            "token": "your-jwt-token"
          }
        }
        ```
        
        **Subscribe to metrics**:
        ```json
        {
          "type": "subscribe"
        }
        ```
        
        **Unsubscribe from metrics**:
        ```json
        {
          "type": "unsubscribe"
        }
        ```
        
        **Server messages** will be in the format:
        ```json
        {
          "type": "metric",
          "metric": "cpu",
          "timestamp": "2024-01-01T00:00:00Z",
          "data": { ... }
        }
        ```
      tags:
        - WebSocket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /ws/logs:
    get:
      summary: WebSocket endpoint for live system logs
      description: |
        Establish a WebSocket connection to receive real-time system logs.
        
        **WebSocket URL**: `ws://localhost:8080/ws/logs`
        
        **Authentication**: Send JWT token in the first message after connection:
        ```json
        {
          "type": "auth",
          "payload": {
            "token": "your-jwt-token"
          }
        }
        ```
        
        **Subscribe Examples**:
        
        1. All logs from all services (most verbose):
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "follow": true
            }
          }
        }
        ```
        
        2. Specific service logs:
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "unit": "sshd",
              "priority": "info",
              "follow": true
            }
          }
        }
        ```
        
        3. Kernel messages:
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "unit": "kernel",
              "follow": true
            }
          }
        }
        ```
        
        4. Recent logs (last 10 minutes):
        ```json
        {
          "type": "subscribe",
          "payload": {
            "filters": {
              "since": "10 minutes ago",
              "follow": true
            }
          }
        }
        ```
        
        **Server Response Format**:
        ```json
        {
          "type": "data",
          "payload": {
            "timestamp": "2024-01-15T10:30:00Z",
            "level": "info",
            "unit": "sshd.service",
            "message": "Accepted publickey for john from 192.168.1.100 port 52341 ssh2"
          }
        }
        ```
        
        **Priority Levels** (from least to most severe):
        - `debug` - Debugging messages
        - `info` - Informational messages  
        - `notice` - Normal but significant messages
        - `warning` - Warning messages
        - `error` - Error messages
        - `critical` - Critical messages
      tags:
        - WebSocket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /ws/terminal:
    get:
      summary: WebSocket endpoint for terminal session
      description: |
        Establish a WebSocket connection for an interactive terminal session.
        
        **WebSocket URL**: `ws://localhost:8080/ws/terminal`
        
        **Authentication**: Send JWT token in the first message after connection:
        ```json
        {
          "type": "auth",
          "payload": {
            "token": "your-jwt-token"
          }
        }
        ```
        
        **Start terminal session**:
        ```json
        {
          "type": "subscribe",
          "payload": {
            "cols": 80,
            "rows": 24,
            "shell": "/bin/bash"
          }
        }
        ```
        
        **Send input**:
        ```json
        {
          "type": "input",
          "data": "ls -la\n"
        }
        ```
        
        **Resize terminal**:
        ```json
        {
          "type": "resize",
          "payload": {
            "cols": 120,
            "rows": 40
          }
        }
        ```
        
        **Server messages** will be in the format:
        ```json
        {
          "type": "output",
          "data": "terminal output..."
        }
        ```
      tags:
        - WebSocket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  
  schemas:
    APIResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [success, error]
        data:
          type: object
          nullable: true
        error:
          $ref: '#/components/schemas/APIError'
          nullable: true
    
    APIError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
    
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            status:
              enum: [error]
    
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: |
            Username for authentication.
            - For development builds: 'admin' with password 'admin123' is available
            - For production builds: Only Linux system users are allowed
        password:
          type: string
          description: User password
    
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                expires_at:
                  type: integer
    
    MessageResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                message:
                  type: string
    
    Interface:
      type: object
      properties:
        name:
          type: string
        mac:
          type: string
        mtu:
          type: integer
        state:
          type: string
          enum: [up, down]
        type:
          type: string
        addresses:
          type: array
          items:
            type: string
        statistics:
          type: object
          properties:
            rx_bytes:
              type: integer
            tx_bytes:
              type: integer
            rx_packets:
              type: integer
            tx_packets:
              type: integer
            rx_errors:
              type: integer
            tx_errors:
              type: integer
    
    InterfacesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                interfaces:
                  type: array
                  items:
                    $ref: '#/components/schemas/Interface'
    
    AddressRequest:
      type: object
      required:
        - address
        - netmask
      properties:
        address:
          type: string
          format: ipv4
        netmask:
          type: integer
          minimum: 0
          maximum: 32
        gateway:
          type: string
          format: ipv4
    
    BridgeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        interfaces:
          type: array
          items:
            type: string
    
    BondRequest:
      type: object
      required:
        - name
        - mode
        - interfaces
      properties:
        name:
          type: string
        mode:
          type: string
        interfaces:
          type: array
          items:
            type: string
    
    VLANRequest:
      type: object
      required:
        - interface
        - vlan_id
      properties:
        interface:
          type: string
        vlan_id:
          type: integer
          minimum: 1
          maximum: 4094
        name:
          type: string
    
    Disk:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        size:
          type: integer
        model:
          type: string
        serial:
          type: string
        type:
          type: string
        removable:
          type: boolean
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/Partition'
    
    Partition:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        size:
          type: integer
        type:
          type: string
        filesystem:
          type: string
        mount_point:
          type: string
        used:
          type: integer
        available:
          type: integer
        use_percent:
          type: number
    
    DisksResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                disks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Disk'
    
    MountRequest:
      type: object
      required:
        - device
        - mount_point
      properties:
        device:
          type: string
        mount_point:
          type: string
        filesystem:
          type: string
        options:
          type: string
    
    UnmountRequest:
      type: object
      required:
        - mount_point
      properties:
        mount_point:
          type: string
        force:
          type: boolean
          default: false
    
    FormatRequest:
      type: object
      required:
        - device
        - filesystem
      properties:
        device:
          type: string
        filesystem:
          type: string
          enum: [ext4, ext3, ext2, xfs, btrfs]
        label:
          type: string
    
    User:
      type: object
      properties:
        username:
          type: string
        uid:
          type: string
        gid:
          type: string
        home:
          type: string
        shell:
          type: string
    
    UsersResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
    
    UserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        password:
          type: string
        groups:
          type: string
    
    PasswordResetRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          minLength: 6
          description: New password for the user (minimum 6 characters)
    
    LogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        priority:
          type: string
        unit:
          type: string
        message:
          type: string
        hostname:
          type: string
        pid:
          type: integer
    
    LogsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                logs:
                  type: array
                  items:
                    $ref: '#/components/schemas/LogEntry'
                total_count:
                  type: integer
                page:
                  type: integer
                page_size:
                  type: integer
    
    SystemSummaryResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                hostname:
                  type: string
                os:
                  type: string
                platform:
                  type: string
                platform_family:
                  type: string
                platform_version:
                  type: string
                kernel_version:
                  type: string
                uptime:
                  type: integer
                boot_time:
                  type: integer
                cpu_count:
                  type: integer
    
    HardwareResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                hostname:
                  type: string
                architecture:
                  type: string
                virtualization:
                  type: string
                role:
                  type: string
                kernel_version:
                  type: string
    
    MemoryResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                free:
                  type: integer
                used:
                  type: integer
                used_percent:
                  type: number
    
    CPUResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                model_name:
                  type: string
                cores:
                  type: integer
                load1:
                  type: number
                load5:
                  type: number
                load15:
                  type: number
    
    VolumeGroup:
      type: object
      properties:
        name:
          type: string
        size:
          type: integer
        free:
          type: integer
        pv_count:
          type: integer
        lv_count:
          type: integer
        uuid:
          type: string
    
    LogicalVolume:
      type: object
      properties:
        name:
          type: string
        vg_name:
          type: string
        size:
          type: integer
        path:
          type: string
        uuid:
          type: string
        attr:
          type: string
    
    PhysicalVolume:
      type: object
      properties:
        name:
          type: string
        vg_name:
          type: string
        size:
          type: integer
        free:
          type: integer
        uuid:
          type: string
    
    VolumeGroupsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                volume_groups:
                  type: array
                  items:
                    $ref: '#/components/schemas/VolumeGroup'
    
    LogicalVolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                logical_volumes:
                  type: array
                  items:
                    $ref: '#/components/schemas/LogicalVolume'
    
    PhysicalVolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                physical_volumes:
                  type: array
                  items:
                    $ref: '#/components/schemas/PhysicalVolume'
    
    CreateVGRequest:
      type: object
      required:
        - name
        - devices
      properties:
        name:
          type: string
        devices:
          type: array
          items:
            type: string
    
    CreateLVRequest:
      type: object
      required:
        - name
        - vg_name
        - size
      properties:
        name:
          type: string
        vg_name:
          type: string
        size:
          type: string
        filesystem:
          type: string
          enum: [ext4, ext3, ext2, xfs, btrfs]
    
    ISCSITarget:
      type: object
      properties:
        portal:
          type: string
        iqn:
          type: string
        name:
          type: string
        connected:
          type: boolean
    
    ISCSISession:
      type: object
      properties:
        target:
          type: string
        portal:
          type: string
        session_id:
          type: string
        state:
          type: string
    
    ISCSIDiscoverRequest:
      type: object
      required:
        - portal
      properties:
        portal:
          type: string
    
    ISCSITargetsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                targets:
                  type: array
                  items:
                    $ref: '#/components/schemas/ISCSITarget'
    
    ISCSISessionsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                sessions:
                  type: array
                  items:
                    $ref: '#/components/schemas/ISCSISession'
    
    ISCSILoginRequest:
      type: object
      required:
        - target
        - portal
      properties:
        target:
          type: string
        portal:
          type: string
        username:
          type: string
        password:
          type: string
    
    ISCSILogoutRequest:
      type: object
      required:
        - target
      properties:
        target:
          type: string
    
    MultipathDevice:
      type: object
      properties:
        name:
          type: string
        wwid:
          type: string
        vendor:
          type: string
        product:
          type: string
        size:
          type: string
        state:
          type: string
        paths:
          type: array
          items:
            $ref: '#/components/schemas/MultipathPath'
    
    MultipathPath:
      type: object
      properties:
        device:
          type: string
        host:
          type: string
        state:
          type: string
        priority:
          type: integer
        checker:
          type: string
    
    MultipathDevicesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/MultipathDevice'
    
    MultipathPathsResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                paths:
                  type: array
                  items:
                    $ref: '#/components/schemas/MultipathPath'
    
    BTRFSSubvolumesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                subvolumes:
                  type: array
                  items:
                    type: string
    
    BTRFSSubvolumeRequest:
      type: object
      required:
        - path
      properties:
        path:
          type: string
    
    BTRFSSnapshotRequest:
      type: object
      required:
        - source
        - destination
      properties:
        source:
          type: string
        destination:
          type: string
    
    RAIDDevice:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        level:
          type: string
        state:
          type: string
        size:
          type: integer
        devices:
          type: array
          items:
            type: string
        active_disks:
          type: integer
        total_disks:
          type: integer
        chunk_size:
          type: string
        uuid:
          type: string
    
    RAIDDisk:
      type: object
      properties:
        path:
          type: string
        size:
          type: integer
        partition:
          type: boolean
        device:
          type: string
    
    RAIDDevicesResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/RAIDDevice'
    
    RAIDAvailableDisksResponse:
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                disks:
                  type: array
                  items:
                    $ref: '#/components/schemas/RAIDDisk'
    
    CreateRAIDRequest:
      type: object
      required:
        - name
        - level
        - disks
      properties:
        name:
          type: string
          description: Name of the RAID device (e.g., raid0)
        level:
          type: string
          enum: ['0', '1', '5', '6', '10']
          description: RAID level
        disks:
          type: array
          items:
            type: string
          minItems: 2
          description: List of disk paths to use for RAID
        chunk_size:
          type: string
          description: Chunk size (e.g., 512K, 1M)
          default: '512K'
    
    DestroyRAIDRequest:
      type: object
      required:
        - device
      properties:
        device:
          type: string
          description: RAID device path to destroy

    ContainerDetail:
      type: object
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            id:
              type: string
            name:
              type: string
            image:
              type: string
            image_id:
              type: string
            state:
              type: string
            status:
              type: string
            created_at:
              type: string
              format: date-time
            started_at:
              type: string
              format: date-time
              nullable: true
            finished_at:
              type: string
              format: date-time
              nullable: true
            exit_code:
              type: integer
              nullable: true
            pid:
              type: integer
            restart_count:
              type: integer
            command:
              type: array
              items:
                type: string
            args:
              type: array
              items:
                type: string
            env:
              type: array
              items:
                type: string
            mounts:
              type: array
              items:
                type: object
                properties:
                  source:
                    type: string
                  destination:
                    type: string
                  mode:
                    type: string
                  type:
                    type: string
                  read_only:
                    type: boolean
            ports:
              type: array
              items:
                type: object
                properties:
                  container_port:
                    type: integer
                  host_port:
                    type: integer
                  protocol:
                    type: string
                  host_ip:
                    type: string
            networks:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  id:
                    type: string
                  ip_address:
                    type: string
                  ip_prefix_len:
                    type: integer
                  gateway:
                    type: string
                  mac_address:
                    type: string
                  ipv6_address:
                    type: string
                  ipv6_gateway:
                    type: string
                  aliases:
                    type: array
                    items:
                      type: string
                  driver_opts:
                    type: object
                    additionalProperties:
                      type: string
            resources:
              type: object
              properties:
                cpu_shares:
                  type: integer
                cpu_quota:
                  type: integer
                cpu_period:
                  type: integer
                cpuset_cpus:
                  type: string
                cpuset_mems:
                  type: string
                memory_limit:
                  type: integer
                memory_reservation:
                  type: integer
                memory_swap:
                  type: integer
                memory_usage:
                  type: integer
                memory_max_usage:
                  type: integer
                cpu_usage_percent:
                  type: number
                  format: float
                pids_limit:
                  type: integer
                pids_current:
                  type: integer
                blkio_weight:
                  type: integer
                io_read_bytes:
                  type: integer
                io_write_bytes:
                  type: integer
                network_rx_bytes:
                  type: integer
                network_tx_bytes:
                  type: integer
            user:
              type: string
            working_dir:
              type: string
            hostname:
              type: string
            domain_name:
              type: string
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            config:
              type: object
              additionalProperties:
                type: object

    ImageDetail:
      type: object
      allOf:
        - $ref: '#/components/schemas/APIResponse'
        - type: object
          properties:
            id:
              type: string
            repo_tags:
              type: array
              items:
                type: string
            repo_digests:
              type: array
              items:
                type: string
            parent:
              type: string
            author:
              type: string
            architecture:
              type: string
            os:
              type: string
            variant:
              type: string
            created_at:
              type: string
              format: date-time
            size:
              type: integer
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            layers:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  size:
                    type: integer
                  created_at:
                    type: string
                    format: date-time
                  created_by:
                    type: string
                  comment:
                    type: string
            config:
              type: object
              properties:
                user:
                  type: string
                exposed_ports:
                  type: array
                  items:
                    type: string
                env:
                  type: array
                  items:
                    type: string
                cmd:
                  type: array
                  items:
                    type: string
                entrypoint:
                  type: array
                  items:
                    type: string
                volumes:
                  type: array
                  items:
                    type: string
                working_dir:
                  type: string
                stop_signal:
                  type: string
                labels:
                  type: object
                  additionalProperties:
                    type: string
            manifest:
              type: object
              additionalProperties:
                type: string

    # WebSocket Message Schemas
    WSAuthMessage:
      type: object
      required:
        - type
        - token
      properties:
        type:
          type: string
          enum: [auth]
        token:
          type: string
          description: JWT authentication token
    
    WSMetricsSubscribeMessage:
      type: object
      required:
        - type
        - metrics
      properties:
        type:
          type: string
          enum: [subscribe]
        metrics:
          type: array
          items:
            type: string
            enum: [cpu, memory, disk, network, load]
          description: List of metrics to subscribe to
    
    WSMetricsUnsubscribeMessage:
      type: object
      required:
        - type
        - metrics
      properties:
        type:
          type: string
          enum: [unsubscribe]
        metrics:
          type: array
          items:
            type: string
            enum: [cpu, memory, disk, network, load]
          description: List of metrics to unsubscribe from
    
    WSMetricMessage:
      type: object
      required:
        - type
        - metric
        - timestamp
        - data
      properties:
        type:
          type: string
          enum: [metric]
        metric:
          type: string
          enum: [cpu, memory, disk, network, load]
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          description: Metric-specific data
    
    WSLogsSubscribeMessage:
      type: object
      required:
        - type
        - filters
      properties:
        type:
          type: string
          enum: [subscribe]
        filters:
          type: object
          properties:
            services:
              type: array
              items:
                type: string
              description: Filter by service names
            priority:
              type: string
              enum: [emergency, alert, critical, error, warning, notice, info, debug]
              description: Minimum priority level
            follow:
              type: boolean
              default: true
              description: Whether to follow new logs
    
    WSLogMessage:
      type: object
      required:
        - type
        - timestamp
        - message
      properties:
        type:
          type: string
          enum: [log]
        timestamp:
          type: string
          format: date-time
        service:
          type: string
        priority:
          type: string
          enum: [emergency, alert, critical, error, warning, notice, info, debug]
        message:
          type: string
        hostname:
          type: string
        pid:
          type: integer
    
    WSTerminalStartMessage:
      type: object
      required:
        - type
        - cols
        - rows
      properties:
        type:
          type: string
          enum: [start]
        cols:
          type: integer
          minimum: 1
          description: Terminal width in columns
        rows:
          type: integer
          minimum: 1
          description: Terminal height in rows
        shell:
          type: string
          default: /bin/bash
          description: Shell to execute
    
    WSTerminalInputMessage:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [input]
        data:
          type: string
          description: Input data to send to terminal
    
    WSTerminalResizeMessage:
      type: object
      required:
        - type
        - cols
        - rows
      properties:
        type:
          type: string
          enum: [resize]
        cols:
          type: integer
          minimum: 1
          description: New terminal width in columns
        rows:
          type: integer
          minimum: 1
          description: New terminal height in rows
    
    WSTerminalOutputMessage:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [output]
        data:
          type: string
          description: Output data from terminal
    
    WSErrorMessage:
      type: object
      required:
        - type
        - error
      properties:
        type:
          type: string
          enum: [error]
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
    
    # Metric Data Schemas
    CPUMetricData:
      type: object
      properties:
        usage_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
        load1:
          type: number
          format: float
        load5:
          type: number
          format: float
        load15:
          type: number
          format: float
        cores:
          type: array
          items:
            type: object
            properties:
              core:
                type: integer
              usage_percent:
                type: number
                format: float
                minimum: 0
                maximum: 100
    
    MemoryMetricData:
      type: object
      properties:
        total:
          type: integer
          description: Total memory in bytes
        used:
          type: integer
          description: Used memory in bytes
        free:
          type: integer
          description: Free memory in bytes
        available:
          type: integer
          description: Available memory in bytes
        used_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
        swap_total:
          type: integer
          description: Total swap in bytes
        swap_used:
          type: integer
          description: Used swap in bytes
        swap_free:
          type: integer
          description: Free swap in bytes
        swap_used_percent:
          type: number
          format: float
          minimum: 0
          maximum: 100
    
    DiskMetricData:
      type: object
      properties:
        disks:
          type: array
          items:
            type: object
            properties:
              device:
                type: string
              mount_point:
                type: string
              filesystem:
                type: string
              total:
                type: integer
                description: Total space in bytes
              used:
                type: integer
                description: Used space in bytes
              free:
                type: integer
                description: Free space in bytes
              used_percent:
                type: number
                format: float
                minimum: 0
                maximum: 100
              io_stats:
                type: object
                properties:
                  read_bytes_per_sec:
                    type: number
                    format: float
                  write_bytes_per_sec:
                    type: number
                    format: float
                  read_ops_per_sec:
                    type: number
                    format: float
                  write_ops_per_sec:
                    type: number
                    format: float
    
    NetworkMetricData:
      type: object
      properties:
        interfaces:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              rx_bytes_per_sec:
                type: number
                format: float
              tx_bytes_per_sec:
                type: number
                format: float
              rx_packets_per_sec:
                type: number
                format: float
              tx_packets_per_sec:
                type: number
                format: float
              rx_errors:
                type: integer
              tx_errors:
                type: integer
              rx_dropped:
                type: integer
              tx_dropped:
                type: integer
