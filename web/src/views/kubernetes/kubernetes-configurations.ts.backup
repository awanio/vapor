import { LitElement, html, css } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { Api } from '../../utils/api';
import '../../components/tabs/tab-group';
import '../../components/tables/resource-table';
import '../../components/ui/search-input';
import '../../components/ui/namespace-dropdown';
import '../../components/ui/loading-state';
import '../../components/ui/empty-state';
import '../../components/ui/notification-container';
import '../../components/modals/delete-modal';
import '../../components/drawers/detail-drawer';
import '../../components/drawers/create-resource-drawer';

/**
 * Kubernetes Configurations view component
 * Manages ConfigMaps and Secrets
 */
@customElement('kubernetes-configurations')
export class KubernetesConfigurations extends LitElement {
  static override styles = css`
    :host {
      display: block;
      height: 100%;
      background: #1a1d23;
      color: #e0e0e0;
    }

    .configurations-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      padding: 20px;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .title {
      font-size: 24px;
      font-weight: 500;
    }

    .controls {
      display: flex;
      gap: 12px;
      align-items: center;
    }

    .create-button {
      background: #4a7c59;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.2s;
    }

    .create-button:hover {
      background: #5a8c69;
    }

    .content {
      flex: 1;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .filters {
      display: flex;
      gap: 16px;
      margin-bottom: 20px;
      align-items: center;
    }

    .resource-count {
      font-size: 14px;
      color: #999;
      margin-left: auto;
    }

    /* Detail styles */
    .detail-content {
      padding: 20px;
    }

    .detail-content h3 {
      margin: 20px 0 10px 0;
      color: #e0e0e0;
      font-size: 16px;
      font-weight: 500;
    }

    .detail-content h3:first-child {
      margin-top: 0;
    }

    .detail-item {
      display: flex;
      padding: 8px 0;
      border-bottom: 1px solid #2a2d3a;
    }

    .detail-item .label {
      flex: 0 0 150px;
      color: #999;
      font-size: 14px;
    }

    .detail-item .value {
      flex: 1;
      color: #e0e0e0;
      font-size: 14px;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .data-item {
      background: #2a2d3a;
      border-radius: 4px;
      margin-bottom: 12px;
      overflow: hidden;
    }

    .data-header {
      padding: 12px 16px;
      background: #3a3d4a;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }

    .data-key {
      font-weight: 500;
      color: #e0e0e0;
    }

    .data-actions {
      display: flex;
      gap: 8px;
    }

    .data-action {
      background: none;
      border: none;
      color: #999;
      cursor: pointer;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      transition: all 0.2s;
    }

    .data-action:hover {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e0e0;
    }

    .data-content {
      padding: 16px;
      background: #1a1d23;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      font-size: 13px;
      white-space: pre-wrap;
      max-height: 300px;
      overflow-y: auto;
    }

    .secret-value {
      filter: blur(4px);
      transition: filter 0.2s;
    }

    .secret-value.revealed {
      filter: none;
    }

    .binary-data {
      color: #999;
      font-style: italic;
    }
  `;

  // Configuration resource types
  @property({ type: String }) activeTab = 'configmaps';
  @property({ type: String }) namespace = 'All Namespaces';
  @property({ type: String }) searchQuery = '';
  
  @state() private loading = false;
  @state() private configMaps: any[] = [];
  @state() private secrets: any[] = [];
  @state() private namespaces: string[] = [];
  @state() private expandedItems = new Set<string>();
  @state() private revealedSecrets = new Set<string>();
  
  // UI state
  @state() private showDeleteModal = false;
  @state() private showDetailDrawer = false;
  @state() private showCreateDrawer = false;
  @state() private selectedResource: any = null;
  @state() private detailType = '';

  private api = new Api();

  override connectedCallback() {
    super.connectedCallback();
    this.fetchNamespaces();
    this.fetchConfigurationResources();
  }

  override render() {
    const tabs = [
      { id: 'configmaps', label: 'ConfigMaps', count: this.configMaps.length },
      { id: 'secrets', label: 'Secrets', count: this.secrets.length }
    ];

    return html`
      <div class="configurations-container">
        <div class="header">
          <h1 class="title">Configuration Resources</h1>
          <div class="controls">
            <button class="create-button" @click=${this.handleCreate}>
              Create Resource
            </button>
          </div>
        </div>

        <div class="content">
          <div class="filters">
            <namespace-dropdown
              .namespaces=${this.namespaces.map(ns => ({ name: ns }))}
              .selectedNamespace=${this.namespace}
              @namespace-change=${this.handleNamespaceChange}
            ></namespace-dropdown>

            <search-input
              .value=${this.searchQuery}
              placeholder="Search configurations..."
              @search-change=${this.handleSearch}
            ></search-input>

            <span class="resource-count">
              ${this.getFilteredData().length} resources
            </span>
          </div>

          <tab-group
            .tabs=${tabs}
            .activeTab=${this.activeTab}
            @tab-change=${this.handleTabChange}
          ></tab-group>

          ${this.loading ? html`
            <loading-state message="Loading configuration resources..."></loading-state>
          ` : this.renderContent()}
        </div>

        <delete-modal
          .show=${this.showDeleteModal}
          .item=${this.selectedResource}
          @confirm-delete=${this.handleDelete}
          @cancel-delete=${this.handleCancelDelete}
        ></delete-modal>

        <detail-drawer
          .show=${this.showDetailDrawer}
          .title=${this.getDetailTitle()}
          @close=${() => this.showDetailDrawer = false}
        >
          ${this.renderResourceDetail()}
        </detail-drawer>

        <create-resource-drawer
          .show=${this.showCreateDrawer}
          .title="Create Configuration Resource"
          @close=${() => this.showCreateDrawer = false}
          @create=${this.handleCreateResource}
        ></create-resource-drawer>

        <notification-container></notification-container>
      </div>
    `;
  }

  private renderContent() {
    const data = this.getFilteredData();

    if (data.length === 0) {
      return html`
        <empty-state
          message="No ${this.activeTab} found"
          icon="config"
        ></empty-state>
      `;
    }

    return html`
      <resource-table
        .columns=${this.getColumns()}
        .data=${data}
        .getActions=${(item: any) => this.getResourceActions(item)}
        @cell-click=${this.handleCellClick}
        @action=${this.handleAction}
      ></resource-table>
    `;
  }

  private getColumns() {
    switch (this.activeTab) {
      case 'configmaps':
        return [
          { key: 'name', label: 'Name', type: 'link' },
          { key: 'namespace', label: 'Namespace' },
          { key: 'dataCount', label: 'Data', type: 'custom' },
          { key: 'age', label: 'Age' }
        ];
      
      case 'secrets':
        return [
          { key: 'name', label: 'Name', type: 'link' },
          { key: 'namespace', label: 'Namespace' },
          { key: 'type', label: 'Type' },
          { key: 'dataCount', label: 'Data', type: 'custom' },
          { key: 'age', label: 'Age' }
        ];
      
      default:
        return [];
    }
  }

  private getFilteredData() {
    let data: any[] = [];
    
    switch (this.activeTab) {
      case 'configmaps':
        data = this.configMaps;
        break;
      case 'secrets':
        data = this.secrets;
        break;
    }

    // Filter by namespace
    if (this.namespace !== 'All Namespaces') {
      data = data.filter(item => item.namespace === this.namespace);
    }

    // Filter by search query
    if (this.searchQuery) {
      const query = this.searchQuery.toLowerCase();
      data = data.filter(item => 
        item.name.toLowerCase().includes(query) ||
        item.namespace.toLowerCase().includes(query) ||
        (item.type && item.type.toLowerCase().includes(query))
      );
    }

    return data;
  }

  private getResourceActions(_item: any) {
    const actions = [
      { label: 'View Details', action: 'view' },
      { label: 'Edit', action: 'edit' }
    ];

    // Add view keys action for secrets
    if (this.activeTab === 'secrets') {
      actions.push({ label: 'View Keys', action: 'keys' });
    }

    actions.push({ label: 'Delete', action: 'delete', danger: true } as any);
    
    return actions;
  }

  private async fetchNamespaces() {
    try {
      const response = await this.api.get('/kubernetes/namespaces');
      this.namespaces = ['All Namespaces', ...response.items.map((ns: any) => ns.metadata.name)];
    } catch (error) {
      console.error('Failed to fetch namespaces:', error);
    }
  }

  private async fetchConfigurationResources() {
    this.loading = true;
    
    try {
      const [configMaps, secrets] = await Promise.all([
        this.api.get('/kubernetes/configmaps'),
        this.api.get('/kubernetes/secrets')
      ]);

      this.configMaps = this.processConfigMaps(configMaps.items || []);
      this.secrets = this.processSecrets(secrets.items || []);
    } catch (error) {
      console.error('Failed to fetch configuration resources:', error);
      this.showNotification('Failed to load configuration resources', 'error');
    } finally {
      this.loading = false;
    }
  }

  private processConfigMaps(configMaps: any[]): any[] {
    return configMaps.map(cm => ({
      name: cm.metadata.name,
      namespace: cm.metadata.namespace,
      dataCount: Object.keys(cm.data || {}).length + Object.keys(cm.binaryData || {}).length,
      age: this.getAge(cm.metadata.creationTimestamp),
      raw: cm
    }));
  }

  private processSecrets(secrets: any[]): any[] {
    return secrets.map(secret => ({
      name: secret.metadata.name,
      namespace: secret.metadata.namespace,
      type: secret.type,
      dataCount: Object.keys(secret.data || {}).length,
      age: this.getAge(secret.metadata.creationTimestamp),
      raw: secret
    }));
  }

  private getAge(timestamp: string): string {
    const created = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - created.getTime();
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    if (days > 0) return `${days}d`;
    if (hours > 0) return `${hours}h`;
    return '<1h';
  }

  private handleTabChange(e: CustomEvent) {
    this.activeTab = e.detail.tabId;
  }

  private handleNamespaceChange(e: CustomEvent) {
    this.namespace = e.detail.namespace;
  }

  private handleSearch(e: CustomEvent) {
    this.searchQuery = e.detail.value;
  }

  private handleCellClick(e: CustomEvent) {
    if (e.detail.column.type === 'link') {
      this.showResourceDetail(e.detail.item);
    }
  }

  private handleAction(e: CustomEvent) {
    const { action, item } = e.detail;
    
    switch (action) {
      case 'view':
        this.showResourceDetail(item);
        break;
      case 'edit':
        this.editResource(item);
        break;
      case 'delete':
        this.confirmDelete(item);
        break;
      case 'keys':
        this.viewKeys(item);
        break;
    }
  }

  private showResourceDetail(item: any) {
    this.selectedResource = item;
    this.detailType = this.activeTab;
    this.showDetailDrawer = true;
  }

  private editResource(_item: any) {
    // TODO: Implement edit functionality
    this.showNotification('Edit functionality coming soon', 'info');
  }

  private confirmDelete(item: any) {
    this.selectedResource = item;
    this.showDeleteModal = true;
  }

  private viewKeys(item: any) {
    this.selectedResource = item;
    this.detailType = 'secrets';
    this.showDetailDrawer = true;
    // Reveal all secrets for this item
    Object.keys(item.raw.data || {}).forEach(key => {
      this.revealedSecrets.add(`${item.name}-${key}`);
    });
  }

  private handleCreate() {
    this.showCreateDrawer = true;
  }

  private async handleCreateResource(e: CustomEvent) {
    const { resource } = e.detail;
    
    try {
      // TODO: Implement actual resource creation
      await this.api.post(`/kubernetes/${this.activeTab}`, resource);
      this.showNotification('Resource created successfully', 'success');
      this.showCreateDrawer = false;
      this.fetchConfigurationResources();
    } catch (error) {
      this.showNotification('Failed to create resource', 'error');
    }
  }

  private async handleDelete() {
    if (!this.selectedResource) return;
    
    try {
      const namespace = this.selectedResource.namespace;
      const name = this.selectedResource.name;
      
      await this.api.delete(`/kubernetes/${this.activeTab}/${namespace}/${name}`);
      this.showNotification(`${name} deleted successfully`, 'success');
      this.showDeleteModal = false;
      this.fetchConfigurationResources();
    } catch (error) {
      this.showNotification('Failed to delete resource', 'error');
    }
  }

  private handleCancelDelete() {
    this.showDeleteModal = false;
    this.selectedResource = null;
  }

  private getDetailTitle(): string {
    if (!this.selectedResource) return '';
    
    const typeMap: Record<string, string> = {
      configmaps: 'ConfigMap',
      secrets: 'Secret'
    };
    
    return `${typeMap[this.detailType] || ''} Details: ${this.selectedResource.name}`;
  }

  private renderResourceDetail() {
    if (!this.selectedResource) return html``;
    
    switch (this.detailType) {
      case 'configmaps':
        return this.renderConfigMapDetail();
      case 'secrets':
        return this.renderSecretDetail();
      default:
        return html``;
    }
  }

  private renderConfigMapDetail() {
    const cm = this.selectedResource.raw;
    
    return html`
      <div class="detail-content">
        <h3>Basic Information</h3>
        <div class="detail-item">
          <span class="label">Name:</span>
          <span class="value">${cm.metadata.name}</span>
        </div>
        <div class="detail-item">
          <span class="label">Namespace:</span>
          <span class="value">${cm.metadata.namespace}</span>
        </div>
        <div class="detail-item">
          <span class="label">Created:</span>
          <span class="value">${new Date(cm.metadata.creationTimestamp).toLocaleString()}</span>
        </div>
        
        ${cm.data && Object.keys(cm.data).length > 0 ? html`
          <h3>Data</h3>
          ${Object.entries(cm.data).map(([key, value]) => this.renderDataItem(key, value as string, false))}
        ` : ''}
        
        ${cm.binaryData && Object.keys(cm.binaryData).length > 0 ? html`
          <h3>Binary Data</h3>
          ${Object.entries(cm.binaryData).map(([key]) => html`
            <div class="data-item">
              <div class="data-header">
                <span class="data-key">${key}</span>
                <span class="binary-data">(binary data)</span>
              </div>
            </div>
          `)}
        ` : ''}
        
        ${(!cm.data || Object.keys(cm.data).length === 0) && 
          (!cm.binaryData || Object.keys(cm.binaryData).length === 0) ? html`
          <p style="color: #999; margin: 20px 0;">No data in this ConfigMap</p>
        ` : ''}
      </div>
    `;
  }

  private renderSecretDetail() {
    const secret = this.selectedResource.raw;
    
    return html`
      <div class="detail-content">
        <h3>Basic Information</h3>
        <div class="detail-item">
          <span class="label">Name:</span>
          <span class="value">${secret.metadata.name}</span>
        </div>
        <div class="detail-item">
          <span class="label">Namespace:</span>
          <span class="value">${secret.metadata.namespace}</span>
        </div>
        <div class="detail-item">
          <span class="label">Type:</span>
          <span class="value">${secret.type}</span>
        </div>
        <div class="detail-item">
          <span class="label">Created:</span>
          <span class="value">${new Date(secret.metadata.creationTimestamp).toLocaleString()}</span>
        </div>
        
        ${secret.data && Object.keys(secret.data).length > 0 ? html`
          <h3>Data</h3>
          ${Object.entries(secret.data).map(([key, value]) => 
            this.renderDataItem(key, this.decodeBase64(value as string), true)
          )}
        ` : html`
          <p style="color: #999; margin: 20px 0;">No data in this Secret</p>
        `}
      </div>
    `;
  }

  private renderDataItem(key: string, value: string, isSecret: boolean) {
    const itemId = `${this.selectedResource.name}-${key}`;
    const isExpanded = this.expandedItems.has(itemId);
    const isRevealed = this.revealedSecrets.has(itemId);
    
    return html`
      <div class="data-item">
        <div class="data-header" @click=${() => this.toggleExpanded(itemId)}>
          <span class="data-key">${key}</span>
          <div class="data-actions">
            ${isSecret && isExpanded ? html`
              <button
                class="data-action"
                @click=${(e: Event) => {
                  e.stopPropagation();
                  this.toggleReveal(itemId);
                }}
              >
                ${isRevealed ? 'Hide' : 'Reveal'}
              </button>
            ` : ''}
            <button
              class="data-action"
              @click=${(e: Event) => {
                e.stopPropagation();
                this.copyToClipboard(value);
              }}
            >
              Copy
            </button>
            <span>${isExpanded ? '▼' : '▶'}</span>
          </div>
        </div>
        ${isExpanded ? html`
          <div class="data-content ${isSecret && !isRevealed ? 'secret-value' : ''}">
            ${value}
          </div>
        ` : ''}
      </div>
    `;
  }

  private toggleExpanded(itemId: string) {
    if (this.expandedItems.has(itemId)) {
      this.expandedItems.delete(itemId);
    } else {
      this.expandedItems.add(itemId);
    }
    this.requestUpdate();
  }

  private toggleReveal(itemId: string) {
    if (this.revealedSecrets.has(itemId)) {
      this.revealedSecrets.delete(itemId);
    } else {
      this.revealedSecrets.add(itemId);
    }
    this.requestUpdate();
  }

  private decodeBase64(encoded: string): string {
    try {
      return atob(encoded);
    } catch {
      return '(unable to decode)';
    }
  }

  private async copyToClipboard(text: string) {
    try {
      await navigator.clipboard.writeText(text);
      this.showNotification('Copied to clipboard', 'success');
    } catch (error) {
      this.showNotification('Failed to copy to clipboard', 'error');
    }
  }

  private showNotification(message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info') {
    const container = this.shadowRoot?.querySelector('notification-container') as any;
    if (container) {
      container.addNotification({ type, message });
    }
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'kubernetes-configurations': KubernetesConfigurations;
  }
}
