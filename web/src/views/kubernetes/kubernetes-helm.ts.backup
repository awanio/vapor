import { LitElement, html, css } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { Api } from '../../utils/api';
import '../../components/tabs/tab-group';
import '../../components/tables/resource-table';
import '../../components/ui/search-input';
import '../../components/ui/namespace-dropdown';
import '../../components/ui/loading-state';
import '../../components/ui/empty-state';
import '../../components/ui/status-badge';
import '../../components/ui/notification-container';
import '../../components/modals/delete-modal';
import '../../components/drawers/detail-drawer';
import '../../components/drawers/create-resource-drawer';

/**
 * Kubernetes Helm view component
 * Manages Helm releases and charts
 */
@customElement('kubernetes-helm')
export class KubernetesHelm extends LitElement {
  static override styles = css`
    :host {
      display: block;
      height: 100%;
      background: #1a1d23;
      color: #e0e0e0;
    }

    .helm-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      padding: 20px;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .title {
      font-size: 24px;
      font-weight: 500;
    }

    .controls {
      display: flex;
      gap: 12px;
      align-items: center;
    }

    .create-button {
      background: #4a7c59;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.2s;
    }

    .create-button:hover {
      background: #5a8c69;
    }

    .content {
      flex: 1;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .filters {
      display: flex;
      gap: 16px;
      margin-bottom: 20px;
      align-items: center;
    }

    .resource-count {
      font-size: 14px;
      color: #999;
      margin-left: auto;
    }

    /* Detail styles */
    .detail-content {
      padding: 20px;
    }

    .detail-content h3 {
      margin: 20px 0 10px 0;
      color: #e0e0e0;
      font-size: 16px;
      font-weight: 500;
    }

    .detail-content h3:first-child {
      margin-top: 0;
    }

    .detail-item {
      display: flex;
      padding: 8px 0;
      border-bottom: 1px solid #2a2d3a;
    }

    .detail-item .label {
      flex: 0 0 150px;
      color: #999;
      font-size: 14px;
    }

    .detail-item .value {
      flex: 1;
      color: #e0e0e0;
      font-size: 14px;
    }

    .chart-version {
      display: inline-block;
      padding: 2px 8px;
      background: #3a3d4a;
      border-radius: 4px;
      font-size: 12px;
      margin-left: 8px;
    }

    .values-section {
      background: #2a2d3a;
      border-radius: 4px;
      padding: 16px;
      margin-top: 12px;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      font-size: 13px;
      white-space: pre-wrap;
      max-height: 400px;
      overflow-y: auto;
    }

    .revision-item {
      background: #2a2d3a;
      border-radius: 4px;
      padding: 12px;
      margin-bottom: 8px;
    }

    .revision-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }

    .revision-number {
      font-weight: 500;
      color: #4a7c59;
    }

    .revision-date {
      font-size: 12px;
      color: #999;
    }
  `;

  // Helm resource types
  @property({ type: String }) activeTab = 'releases';
  @property({ type: String }) namespace = 'All Namespaces';
  @property({ type: String }) searchQuery = '';
  
  @state() private loading = false;
  @state() private releases: any[] = [];
  @state() private charts: any[] = [];
  @state() private namespaces: string[] = [];
  
  // UI state
  @state() private showDeleteModal = false;
  @state() private showDetailDrawer = false;
  @state() private showCreateDrawer = false;
  @state() private selectedResource: any = null;
  @state() private detailType = '';

  private api = new Api();

  override connectedCallback() {
    super.connectedCallback();
    this.fetchNamespaces();
    this.fetchHelmResources();
  }

  override render() {
    const tabs = [
      { id: 'releases', label: 'Releases', count: this.releases.length },
      { id: 'charts', label: 'Charts', count: this.charts.length }
    ];

    return html`
      <div class="helm-container">
        <div class="header">
          <h1 class="title">Helm Resources</h1>
          <div class="controls">
            <button class="create-button" @click=${this.handleCreate}>
              Install Chart
            </button>
          </div>
        </div>

        <div class="content">
          <div class="filters">
            <namespace-dropdown
              .namespaces=${this.namespaces.map(ns => ({ name: ns }))}
              .selectedNamespace=${this.namespace}
              @namespace-change=${this.handleNamespaceChange}
            ></namespace-dropdown>

            <search-input
              .value=${this.searchQuery}
              placeholder="Search helm resources..."
              @search-change=${this.handleSearch}
            ></search-input>

            <span class="resource-count">
              ${this.getFilteredData().length} resources
            </span>
          </div>

          <tab-group
            .tabs=${tabs}
            .activeTab=${this.activeTab}
            @tab-change=${this.handleTabChange}
          ></tab-group>

          ${this.loading ? html`
            <loading-state message="Loading helm resources..."></loading-state>
          ` : this.renderContent()}
        </div>

        <delete-modal
          .show=${this.showDeleteModal}
          .item=${this.selectedResource}
          @confirm-delete=${this.handleDelete}
          @cancel-delete=${this.handleCancelDelete}
        ></delete-modal>

        <detail-drawer
          .show=${this.showDetailDrawer}
          .title=${this.getDetailTitle()}
          @close=${() => this.showDetailDrawer = false}
        >
          ${this.renderResourceDetail()}
        </detail-drawer>

        <create-resource-drawer
          .show=${this.showCreateDrawer}
          .title="Install Helm Chart"
          @close=${() => this.showCreateDrawer = false}
          @create=${this.handleInstallChart}
        ></create-resource-drawer>

        <notification-container></notification-container>
      </div>
    `;
  }

  private renderContent() {
    const data = this.getFilteredData();

    if (data.length === 0) {
      return html`
        <empty-state
          message="No ${this.activeTab} found"
          icon="helm"
        ></empty-state>
      `;
    }

    return html`
      <resource-table
        .columns=${this.getColumns()}
        .data=${data}
        .getActions=${(item: any) => this.getResourceActions(item)}
        @cell-click=${this.handleCellClick}
        @action=${this.handleAction}
      ></resource-table>
    `;
  }

  private getColumns() {
    switch (this.activeTab) {
      case 'releases':
        return [
          { key: 'name', label: 'Name', type: 'link' },
          { key: 'namespace', label: 'Namespace' },
          { key: 'status', label: 'Status', type: 'status' },
          { key: 'chart', label: 'Chart' },
          { key: 'appVersion', label: 'App Version' },
          { key: 'revision', label: 'Revision' },
          { key: 'updated', label: 'Updated' }
        ];
      
      case 'charts':
        return [
          { key: 'name', label: 'Name', type: 'link' },
          { key: 'version', label: 'Latest Version' },
          { key: 'appVersion', label: 'App Version' },
          { key: 'description', label: 'Description' },
          { key: 'repo', label: 'Repository' }
        ];
      
      default:
        return [];
    }
  }

  private getFilteredData() {
    let data: any[] = [];
    
    switch (this.activeTab) {
      case 'releases':
        data = this.releases;
        break;
      case 'charts':
        data = this.charts;
        break;
    }

    // Filter by namespace (only for releases)
    if (this.namespace !== 'All Namespaces' && this.activeTab === 'releases') {
      data = data.filter(item => item.namespace === this.namespace);
    }

    // Filter by search query
    if (this.searchQuery) {
      const query = this.searchQuery.toLowerCase();
      data = data.filter(item => 
        item.name.toLowerCase().includes(query) ||
        (item.namespace && item.namespace.toLowerCase().includes(query)) ||
        (item.chart && item.chart.toLowerCase().includes(query))
      );
    }

    return data;
  }

  private getResourceActions(_item: any) {
    if (this.activeTab === 'releases') {
      return [
        { label: 'View Details', action: 'view' },
        { label: 'View Values', action: 'values' },
        { label: 'Upgrade', action: 'upgrade' },
        { label: 'Rollback', action: 'rollback' },
        { label: 'Uninstall', action: 'uninstall', danger: true }
      ];
    } else {
      return [
        { label: 'View Details', action: 'view' },
        { label: 'Install', action: 'install' }
      ];
    }
  }

  private async fetchNamespaces() {
    try {
      const response = await this.api.get('/kubernetes/namespaces');
      this.namespaces = ['All Namespaces', ...response.items.map((ns: any) => ns.metadata.name)];
    } catch (error) {
      console.error('Failed to fetch namespaces:', error);
    }
  }

  private async fetchHelmResources() {
    this.loading = true;
    
    try {
      const [releases, charts] = await Promise.all([
        this.api.get('/helm/releases'),
        this.api.get('/helm/charts')
      ]);

      this.releases = this.processReleases(releases || []);
      this.charts = this.processCharts(charts || []);
    } catch (error) {
      console.error('Failed to fetch helm resources:', error);
      this.showNotification('Failed to load helm resources', 'error');
    } finally {
      this.loading = false;
    }
  }

  private processReleases(releases: any[]): any[] {
    return releases.map(release => ({
      name: release.name,
      namespace: release.namespace,
      status: release.status,
      chart: `${release.chart.metadata.name}-${release.chart.metadata.version}`,
      appVersion: release.chart.metadata.appVersion,
      revision: release.version,
      updated: this.formatDate(release.info.last_deployed),
      raw: release
    }));
  }

  private processCharts(charts: any[]): any[] {
    return charts.map(chart => ({
      name: chart.name,
      version: chart.latest_version,
      appVersion: chart.app_version,
      description: chart.description,
      repo: chart.repo,
      raw: chart
    }));
  }

  private formatDate(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) {
      const hours = Math.floor(diff / (1000 * 60 * 60));
      if (hours === 0) {
        const minutes = Math.floor(diff / (1000 * 60));
        return `${minutes}m ago`;
      }
      return `${hours}h ago`;
    } else if (days < 7) {
      return `${days}d ago`;
    } else {
      return date.toLocaleDateString();
    }
  }

  private handleTabChange(e: CustomEvent) {
    this.activeTab = e.detail.tabId;
  }

  private handleNamespaceChange(e: CustomEvent) {
    this.namespace = e.detail.namespace;
  }

  private handleSearch(e: CustomEvent) {
    this.searchQuery = e.detail.value;
  }

  private handleCellClick(e: CustomEvent) {
    if (e.detail.column.type === 'link') {
      this.showResourceDetail(e.detail.item);
    }
  }

  private handleAction(e: CustomEvent) {
    const { action, item } = e.detail;
    
    switch (action) {
      case 'view':
        this.showResourceDetail(item);
        break;
      case 'values':
        this.viewValues(item);
        break;
      case 'upgrade':
        this.upgradeRelease(item);
        break;
      case 'rollback':
        this.rollbackRelease(item);
        break;
      case 'uninstall':
        this.confirmDelete(item);
        break;
      case 'install':
        this.installChart(item);
        break;
    }
  }

  private showResourceDetail(item: any) {
    this.selectedResource = item;
    this.detailType = this.activeTab;
    this.showDetailDrawer = true;
  }

  private viewValues(item: any) {
    this.selectedResource = item;
    this.detailType = 'values';
    this.showDetailDrawer = true;
  }

  private upgradeRelease(_item: any) {
    // TODO: Implement upgrade functionality
    this.showNotification('Upgrade functionality coming soon', 'info');
  }

  private rollbackRelease(_item: any) {
    // TODO: Implement rollback functionality
    this.showNotification('Rollback functionality coming soon', 'info');
  }

  private confirmDelete(item: any) {
    this.selectedResource = item;
    this.showDeleteModal = true;
  }

  private installChart(_item: any) {
    // TODO: Implement install functionality
    this.showNotification('Install functionality coming soon', 'info');
  }

  private handleCreate() {
    this.showCreateDrawer = true;
  }

  private async handleInstallChart(e: CustomEvent) {
    const { resource } = e.detail;
    
    try {
      // TODO: Implement actual chart installation
      await this.api.post('/helm/install', resource);
      this.showNotification('Chart installed successfully', 'success');
      this.showCreateDrawer = false;
      this.fetchHelmResources();
    } catch (error) {
      this.showNotification('Failed to install chart', 'error');
    }
  }

  private async handleDelete() {
    if (!this.selectedResource) return;
    
    try {
      const name = this.selectedResource.name;
      const namespace = this.selectedResource.namespace;
      
      await this.api.delete(`/helm/releases/${namespace}/${name}`);
      this.showNotification(`${name} uninstalled successfully`, 'success');
      this.showDeleteModal = false;
      this.fetchHelmResources();
    } catch (error) {
      this.showNotification('Failed to uninstall release', 'error');
    }
  }

  private handleCancelDelete() {
    this.showDeleteModal = false;
    this.selectedResource = null;
  }

  private getDetailTitle(): string {
    if (!this.selectedResource) return '';
    
    if (this.detailType === 'values') {
      return `Values: ${this.selectedResource.name}`;
    }
    
    const typeMap: Record<string, string> = {
      releases: 'Release',
      charts: 'Chart'
    };
    
    return `${typeMap[this.detailType] || ''} Details: ${this.selectedResource.name}`;
  }

  private renderResourceDetail() {
    if (!this.selectedResource) return html``;
    
    switch (this.detailType) {
      case 'releases':
        return this.renderReleaseDetail();
      case 'charts':
        return this.renderChartDetail();
      case 'values':
        return this.renderValues();
      default:
        return html``;
    }
  }

  private renderReleaseDetail() {
    const release = this.selectedResource.raw;
    
    return html`
      <div class="detail-content">
        <h3>Basic Information</h3>
        <div class="detail-item">
          <span class="label">Name:</span>
          <span class="value">${release.name}</span>
        </div>
        <div class="detail-item">
          <span class="label">Namespace:</span>
          <span class="value">${release.namespace}</span>
        </div>
        <div class="detail-item">
          <span class="label">Status:</span>
          <span class="value">
            <status-badge status=${release.status.toLowerCase()}></status-badge>
          </span>
        </div>
        <div class="detail-item">
          <span class="label">Revision:</span>
          <span class="value">${release.version}</span>
        </div>
        
        <h3>Chart Information</h3>
        <div class="detail-item">
          <span class="label">Chart:</span>
          <span class="value">
            ${release.chart.metadata.name}
            <span class="chart-version">${release.chart.metadata.version}</span>
          </span>
        </div>
        <div class="detail-item">
          <span class="label">App Version:</span>
          <span class="value">${release.chart.metadata.appVersion || 'N/A'}</span>
        </div>
        <div class="detail-item">
          <span class="label">Description:</span>
          <span class="value">${release.chart.metadata.description || 'No description'}</span>
        </div>
        
        <h3>Deployment Information</h3>
        <div class="detail-item">
          <span class="label">First Deployed:</span>
          <span class="value">${new Date(release.info.first_deployed).toLocaleString()}</span>
        </div>
        <div class="detail-item">
          <span class="label">Last Deployed:</span>
          <span class="value">${new Date(release.info.last_deployed).toLocaleString()}</span>
        </div>
        <div class="detail-item">
          <span class="label">Notes:</span>
          <span class="value">${release.info.notes || 'No notes'}</span>
        </div>
        
        ${release.history && release.history.length > 1 ? html`
          <h3>History</h3>
          ${release.history.map((revision: any) => html`
            <div class="revision-item">
              <div class="revision-header">
                <span class="revision-number">Revision ${revision.version}</span>
                <span class="revision-date">${new Date(revision.info.last_deployed).toLocaleString()}</span>
              </div>
              <div class="detail-item">
                <span class="label">Status:</span>
                <span class="value">${revision.status}</span>
              </div>
              <div class="detail-item">
                <span class="label">Chart:</span>
                <span class="value">${revision.chart.metadata.name}-${revision.chart.metadata.version}</span>
              </div>
            </div>
          `).reverse()}
        ` : ''}
      </div>
    `;
  }

  private renderChartDetail() {
    const chart = this.selectedResource.raw;
    
    return html`
      <div class="detail-content">
        <h3>Basic Information</h3>
        <div class="detail-item">
          <span class="label">Name:</span>
          <span class="value">${chart.name}</span>
        </div>
        <div class="detail-item">
          <span class="label">Repository:</span>
          <span class="value">${chart.repo}</span>
        </div>
        <div class="detail-item">
          <span class="label">Latest Version:</span>
          <span class="value">${chart.latest_version}</span>
        </div>
        <div class="detail-item">
          <span class="label">App Version:</span>
          <span class="value">${chart.app_version || 'N/A'}</span>
        </div>
        <div class="detail-item">
          <span class="label">Description:</span>
          <span class="value">${chart.description || 'No description'}</span>
        </div>
        
        ${chart.keywords && chart.keywords.length > 0 ? html`
          <h3>Keywords</h3>
          <div class="detail-item">
            <span class="value">${chart.keywords.join(', ')}</span>
          </div>
        ` : ''}
        
        ${chart.maintainers && chart.maintainers.length > 0 ? html`
          <h3>Maintainers</h3>
          ${chart.maintainers.map((maintainer: any) => html`
            <div class="detail-item">
              <span class="label">${maintainer.name}:</span>
              <span class="value">${maintainer.email || 'No email'}</span>
            </div>
          `)}
        ` : ''}
        
        ${chart.sources && chart.sources.length > 0 ? html`
          <h3>Sources</h3>
          ${chart.sources.map((source: string) => html`
            <div class="detail-item">
              <span class="value">
                <a href="${source}" target="_blank" style="color: #4a7c59;">${source}</a>
              </span>
            </div>
          `)}
        ` : ''}
        
        ${chart.home ? html`
          <h3>Home Page</h3>
          <div class="detail-item">
            <span class="value">
              <a href="${chart.home}" target="_blank" style="color: #4a7c59;">${chart.home}</a>
            </span>
          </div>
        ` : ''}
      </div>
    `;
  }

  private renderValues() {
    const release = this.selectedResource.raw;
    const values = release.config || {};
    
    return html`
      <div class="detail-content">
        <h3>Release Values</h3>
        <div class="values-section">
          ${JSON.stringify(values, null, 2)}
        </div>
        
        ${release.manifest ? html`
          <h3>Generated Manifest (Preview)</h3>
          <div class="values-section">
            ${release.manifest.substring(0, 1000)}...
          </div>
        ` : ''}
      </div>
    `;
  }

  private showNotification(message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info') {
    const container = this.shadowRoot?.querySelector('notification-container') as any;
    if (container) {
      container.addNotification({ type, message });
    }
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'kubernetes-helm': KubernetesHelm;
  }
}
