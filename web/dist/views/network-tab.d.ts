import { I18nLitElement } from '../i18n-mixin';
import type { NetworkInterface } from '../types/api';
import '../components/modal-dialog';
export declare class NetworkTab extends I18nLitElement {
    subRoute: string | null;
    static styles: import("lit").CSSResult;
    private activeTab;
    private interfaces;
    private bridges;
    private bonds;
    private vlans;
    private showConfigureDrawer;
    private showBridgeDrawer;
    private bridgeFormData;
    private showBondDrawer;
    private bondFormData;
    private vlanFormData;
    private showVLANDrawer;
    private searchQuery;
    private bridgeSearchQuery;
    private bondSearchQuery;
    private vlanSearchQuery;
    private configureNetworkInterface;
    private configureFormData;
    private showConfirmModal;
    private confirmAction;
    private confirmTitle;
    private confirmMessage;
    constructor();
    handlePopState(): void;
    firstUpdated(): void;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    private handleSubRoute;
    disconnectedCallback(): void;
    handleDocumentClick(e: Event): void;
    handleKeyDown(e: KeyboardEvent): void;
    toggleActionMenu(event: Event, menuId: string): void;
    closeAllMenus(): void;
    fetchNetworkData(): Promise<void>;
    fetchInterfaces(): Promise<void>;
    fetchBridges(): Promise<void>;
    fetchBonds(): Promise<void>;
    fetchVlans(): Promise<void>;
    toggleInterfaceState(iface: NetworkInterface): void;
    deleteBridge(name: string): Promise<void>;
    deleteBond(name: string): Promise<void>;
    deleteVlan(name: string): Promise<void>;
    showConfirmDialog(title: string, message: string, action: () => void): void;
    handleConfirm(): void;
    handleCancel(): void;
    openVLANDrawer(): void;
    closeVLANDrawer(): void;
    handleConfigureAddress(iface: NetworkInterface): void;
    submitConfigureAddress(): Promise<void>;
    closeConfigureDrawer(): void;
    openBridgeDrawer(): void;
    closeBridgeDrawer(): void;
    openBondDrawer(): void;
    closeBondDrawer(): void;
    handleCreateBridge(): Promise<void>;
    handleCreateBond(): Promise<void>;
    handleCreateVLANInterface(): Promise<void>;
    renderInterface(iface: NetworkInterface): import("lit-html").TemplateResult<1>;
    private getPageTitle;
    render(): import("lit-html").TemplateResult<1>;
}
//# sourceMappingURL=network-tab.d.ts.map