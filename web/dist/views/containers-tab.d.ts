import { LitElement } from 'lit';
import '../components/modal-dialog';
interface UploadItem {
    id: string;
    file: File;
    progress: number;
    status: 'pending' | 'uploading' | 'completed' | 'error';
    error?: string;
}
export declare class ContainersTab extends LitElement {
    private activeTab;
    private containers;
    private images;
    private searchTerm;
    private error;
    private runtime;
    private showConfirmModal;
    private confirmAction;
    private selectedContainer;
    private selectedImage;
    private showDrawer;
    private detailError;
    private confirmTitle;
    private confirmMessage;
    private showLogsDrawer;
    private containerLogs;
    private logsError;
    private logsSearchTerm;
    private showImageActionsDropdown;
    private showPullImageModal;
    private imageName;
    private selectedFile;
    private showUploadDrawer;
    private uploadQueue;
    private isUploading;
    static styles: import("lit").CSSResult;
    connectedCallback(): void;
    disconnectedCallback(): void;
    handleLocationChange: () => void;
    handleTabClick(event: MouseEvent, tab: string): void;
    fetchData(): Promise<void>;
    fetchContainerDetails(id: string): Promise<void>;
    fetchImageDetails(id: string): Promise<void>;
    fetchContainers(): Promise<void>;
    fetchImages(): Promise<void>;
    showConfirmDialog(title: string, message: string, action: () => void): void;
    handleConfirm(): void;
    handleCancel(): void;
    startContainer(id: string, name?: string): Promise<void>;
    stopContainer(id: string, name?: string): Promise<void>;
    removeContainer(id: string, name?: string): Promise<void>;
    removeImage(id: string, tag?: string): Promise<void>;
    fetchContainerLogs(id: string, name?: string): Promise<void>;
    renderContainersTable(): import("lit-html").TemplateResult<1>;
    renderImagesTable(): import("lit-html").TemplateResult<1>;
    formatSize(bytes: number): string;
    getStatusClass(state: string | undefined): string;
    getStatusTooltip(state: string | undefined): string;
    toggleActionMenu(event: Event, menuId: string): void;
    closeAllMenus(): void;
    renderTabs(): import("lit-html").TemplateResult<1>;
    renderError(): import("lit-html").TemplateResult<1>;
    renderContainerDetails(): import("lit-html").TemplateResult<1> | undefined;
    renderImageDetails(): import("lit-html").TemplateResult<1> | undefined;
    render(): import("lit-html").TemplateResult<1>;
    highlightSearchTerm(text: string, searchTerm: string): string;
    private handleOutsideClick;
    private handleKeyDown;
    toggleImageActionsDropdown(event: Event): void;
    handleImageActionSelect(action: string): void;
    triggerFileUpload(): void;
    handleFileUpload(): Promise<void>;
    handleConfirmPullImage(): void;
    handleCancelPullImage(): void;
    pullImage(imageName: string): Promise<void>;
    openUploadDrawer(): void;
    closeUploadDrawer(): void;
    handleUploadZoneClick(): void;
    handleFileInputChange(event: Event): void;
    handleDragOver(event: DragEvent): void;
    handleDragLeave(event: DragEvent): void;
    handleDrop(event: DragEvent): void;
    addFilesToQueue(files: File[]): void;
    removeFromQueue(id: string): void;
    startUploads(): Promise<void>;
    uploadSingleFile(item: UploadItem): Promise<void>;
    simulateUploadProgress(itemId: string): Promise<void>;
    updateUploadProgress(itemId: string, progress: number): void;
    clearCompletedUploads(): void;
    formatFileSize(bytes: number): string;
    renderUploadDrawer(): import("lit-html").TemplateResult<1>;
    renderUploadItem(item: UploadItem): import("lit-html").TemplateResult<1>;
}
export {};
//# sourceMappingURL=containers-tab.d.ts.map