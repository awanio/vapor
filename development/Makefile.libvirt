# Makefile for Vapor Libvirt Development Environment

.PHONY: help up down build clean logs shell test vm-create vm-list vm-start vm-stop vm-console

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

help: ## Show this help message
	@echo "${GREEN}Vapor Libvirt Development Environment${NC}"
	@echo ""
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  ${YELLOW}%-15s${NC} %s\n", $$1, $$2}'

up: ## Start the libvirt development environment
	@echo "${GREEN}Starting libvirt development environment...${NC}"
	docker-compose -f docker-compose.libvirt.yml up -d
	@echo "${GREEN}Waiting for services to be ready...${NC}"
	@sleep 10
	@echo "${GREEN}Environment is ready!${NC}"
	@echo ""
	@echo "Services available:"
	@echo "  - Vapor API:      http://localhost:8080"
	@echo "  - NoVNC Console:  http://localhost:6080"
	@echo "  - Storage Server: http://localhost:8083"
	@echo "  - Libvirt API:    localhost:16509"
	@echo ""
	@echo "Use 'make logs' to view logs"
	@echo "Use 'make shell' to enter the libvirt container"

down: ## Stop the libvirt development environment
	@echo "${RED}Stopping libvirt development environment...${NC}"
	docker-compose -f docker-compose.libvirt.yml down

build: ## Build the libvirt containers
	@echo "${GREEN}Building libvirt containers...${NC}"
	docker-compose -f docker-compose.libvirt.yml build

clean: ## Clean up all libvirt containers and volumes
	@echo "${RED}Cleaning up libvirt environment...${NC}"
	docker-compose -f docker-compose.libvirt.yml down -v
	@echo "${GREEN}Cleanup complete${NC}"

logs: ## View logs from all services
	docker-compose -f docker-compose.libvirt.yml logs -f

logs-api: ## View logs from Vapor API
	docker-compose -f docker-compose.libvirt.yml logs -f vapor-api-libvirt

logs-libvirt: ## View logs from libvirt host
	docker-compose -f docker-compose.libvirt.yml logs -f libvirt-host

shell: ## Enter the libvirt host container
	@echo "${GREEN}Entering libvirt host container...${NC}"
	docker exec -it vapor-libvirt-dev bash

shell-api: ## Enter the Vapor API container
	@echo "${GREEN}Entering Vapor API container...${NC}"
	docker exec -it vapor-api-libvirt bash

test: ## Run API tests against libvirt
	@echo "${GREEN}Testing libvirt integration...${NC}"
	@echo "Checking API health..."
	@curl -s http://localhost:8080/health | jq . || echo "${RED}API not responding${NC}"
	@echo ""
	@echo "Listing VMs via API..."
	@curl -s http://localhost:8080/api/v1/vms | jq . || echo "${RED}Failed to list VMs${NC}"

vm-create: ## Create a test VM
	@echo "${GREEN}Creating test VM...${NC}"
	@curl -X POST http://localhost:8080/api/v1/vms \
		-H "Content-Type: application/json" \
		-d '{"name":"test-vm","memory":1024,"vcpus":1,"disk_size":5}' | jq .

vm-list: ## List all VMs
	@echo "${GREEN}Listing VMs...${NC}"
	@docker exec vapor-libvirt-dev virsh list --all

vm-start: ## Start a VM (usage: make vm-start VM=test-vm)
	@echo "${GREEN}Starting VM: ${VM}${NC}"
	@docker exec vapor-libvirt-dev virsh start ${VM}

vm-stop: ## Stop a VM (usage: make vm-stop VM=test-vm)
	@echo "${YELLOW}Stopping VM: ${VM}${NC}"
	@docker exec vapor-libvirt-dev virsh shutdown ${VM}

vm-console: ## Connect to VM console (usage: make vm-console VM=test-vm)
	@echo "${GREEN}Connecting to VM console: ${VM}${NC}"
	@echo "${YELLOW}Press Ctrl+] to exit console${NC}"
	@docker exec -it vapor-libvirt-dev virsh console ${VM}

network-list: ## List libvirt networks
	@echo "${GREEN}Listing networks...${NC}"
	@docker exec vapor-libvirt-dev virsh net-list --all

pool-list: ## List storage pools
	@echo "${GREEN}Listing storage pools...${NC}"
	@docker exec vapor-libvirt-dev virsh pool-list --all

install-templates: ## Download VM templates
	@echo "${GREEN}Downloading VM templates...${NC}"
	mkdir -p storage/templates storage/iso
	@echo "Downloading Ubuntu 22.04 cloud image..."
	@curl -L -o storage/templates/ubuntu-22.04.img \
		https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img || true
	@echo "Downloading CentOS 9 Stream cloud image..."
	@curl -L -o storage/templates/centos-9.qcow2 \
		https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2 || true
	@echo "${GREEN}Templates downloaded to storage/templates/${NC}"

virsh: ## Run virsh command (usage: make virsh CMD="list --all")
	@docker exec vapor-libvirt-dev virsh ${CMD}

api-curl: ## Make API request (usage: make api-curl PATH="/vms" METHOD="GET")
	@curl -X ${METHOD} http://localhost:8080/api/v1${PATH} \
		-H "Content-Type: application/json" | jq .

monitor: ## Monitor VM resources
	@echo "${GREEN}Monitoring VMs...${NC}"
	@docker exec -it vapor-libvirt-dev virt-top

backup: ## Backup all VMs
	@echo "${GREEN}Backing up VMs...${NC}"
	@mkdir -p backups
	@docker run --rm -v vapor-libvirt-images:/source:ro -v ./backups:/backup \
		alpine tar czf /backup/vms-backup-$$(date +%Y%m%d-%H%M%S).tar.gz -C /source .
	@echo "${GREEN}Backup complete in backups/ directory${NC}"

restore: ## Restore VMs from backup (usage: make restore FILE=vms-backup-20240101-120000.tar.gz)
	@echo "${YELLOW}Restoring VMs from ${FILE}...${NC}"
	@docker run --rm -v vapor-libvirt-images:/target -v ./backups:/backup \
		alpine tar xzf /backup/${FILE} -C /target
	@echo "${GREEN}Restore complete${NC}"

# Development helpers
dev-reload: ## Rebuild and restart the API container
	@echo "${GREEN}Rebuilding API container...${NC}"
	docker-compose -f docker-compose.libvirt.yml build vapor-api-libvirt
	docker-compose -f docker-compose.libvirt.yml restart vapor-api-libvirt
	@echo "${GREEN}API container reloaded${NC}"

dev-exec: ## Execute command in API container (usage: make dev-exec CMD="go test ./...")
	@docker exec vapor-api-libvirt ${CMD}

# Default target
.DEFAULT_GOAL := help
