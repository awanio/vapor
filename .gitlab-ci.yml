stages:
  - lint
  - test
  - build
  - deploy

variables:
  PATH_NAME: "awanio/vapor-api"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  GIT_DEPTH: 1
  GO_VERSION: "1.24"
  GOLANGCI_LINT_VERSION: "v1.54.2"
  # Cache paths
  GOPATH: "$CI_PROJECT_DIR/.go"
  GOCACHE: "$CI_PROJECT_DIR/.go-cache"
  # Test variables
  TEST_TIMEOUT: "10m"
  COVERAGE_THRESHOLD: "60"

cache:
  key: "${CI_COMMIT_REF_SLUG}-go"
  paths:
    - .go/pkg/mod/
    - .go-cache/

.go_before_script: &go_before_script
  - mkdir -p .go .go-cache
  - export PATH=$PATH:$GOPATH/bin

lint:golangci:
  stage: lint
  image: golang:${GO_VERSION}-alpine
  before_script:
    - *go_before_script
    - apk add --no-cache git gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s ${GOLANGCI_LINT_VERSION}
  script:
    - ./bin/golangci-lint run --timeout 5m --color always
  allow_failure: true
  only:
    - merge_requests
    - main
    - dev
  artifacts:
    when: always
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in: 1 week

lint:security:
  stage: lint
  image: golang:${GO_VERSION}-alpine
  before_script:
    - *go_before_script
    - apk add --no-cache git
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
  script:
    - gosec -fmt json -out gosec-report.json -stdout -verbose=text -severity medium ./...
  allow_failure: true
  only:
    - merge_requests
  artifacts:
    when: always
    reports:
      sast: gosec-report.json
    paths:
      - gosec-report.json
    expire_in: 1 week

lint:fmt:
  stage: lint
  image: golang:${GO_VERSION}-alpine
  before_script:
    - *go_before_script
  script:
    - gofmt -l -d .
    - test -z "$(gofmt -l .)"
  only:
    - merge_requests

test:unit:
  stage: test
  image: golang:${GO_VERSION}-alpine
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - *go_before_script
    - apk add --no-cache git gcc musl-dev sqlite-dev libvirt-dev pkgconfig
    - go mod download
  script:
    - echo "Running unit tests with coverage..."
    - go test -v -race -coverprofile=coverage.out -covermode=atomic -timeout=${TEST_TIMEOUT} ./...
    - go tool cover -func=coverage.out
    - go tool cover -html=coverage.out -o coverage.html
    # Check coverage threshold
    - |
      coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
      echo "Total coverage: ${coverage}%"
      if (( $(echo "$coverage < $COVERAGE_THRESHOLD" | bc -l) )); then
        echo "Coverage ${coverage}% is below threshold ${COVERAGE_THRESHOLD}%"
        exit 1
      fi
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.out
      - coverage.html
      - report.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - dev

test:integration:
  stage: test
  image: golang:${GO_VERSION}
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    # Docker-in-Docker variables
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - *go_before_script
    # Install system dependencies
    - apt-get update
    - apt-get install -y 
        libvirt-dev 
        pkg-config 
        sqlite3 
        util-linux 
        e2fsprogs 
        xfsprogs 
        btrfs-progs 
        lvm2 
        open-iscsi 
        multipath-tools
    - go mod download
    # Wait for Docker to be ready
    - |
      timeout=60
      until docker info >/dev/null 2>&1; do
        if [ $timeout -le 0 ]; then
          echo "Docker daemon failed to start"
          exit 1
        fi
        echo "Waiting for Docker daemon..."
        sleep 1
        timeout=$((timeout - 1))
      done
  script:
    - echo "Running integration tests..."
    - go test -v -tags=integration -timeout=${TEST_TIMEOUT} ./internal/tests/...
    - go test -v -tags=integration -timeout=${TEST_TIMEOUT} ./internal/*/integration_test.go
  artifacts:
    when: always
    reports:
      junit: integration-report.xml
    paths:
      - integration-report.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - dev

build:
  stage: build
  image:
    name: cimg/base:edge-22.04
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - |
      timeout=60
      until docker info >/dev/null 2>&1; do
        if [ $timeout -le 0 ]; then
          echo "Docker daemon failed to start"
          exit 1
        fi
        echo "Waiting for Docker daemon..."
        sleep 1
        timeout=$((timeout - 1))
      done
  script:
    - >
      docker build 
      -t $ACR_HOST/$PATH_NAME:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA 
      -f $CI_PROJECT_DIR/Dockerfile 
      $CI_PROJECT_DIR 
    - mkdir ~/build
    - >
      docker run -d -v ~/build:/build 
      --name vapor 
      --rm 
      $ACR_HOST/$PATH_NAME:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA 
      /bin/sh -c "tail -F /dev/null" 
    - docker cp vapor:/root/vapor ~/build/
    - docker stop vapor
    - ls -lah ~/build
    - chmod +x ~/build/vapor
    - cp -r ./openapi.yaml ./ansible ~/build/ 
    - tar -czvf vapor-linux-amd64.tar.gz ~/build
    - cat $MC_CLIENT > mc-client.sh
    - chmod +x ./mc-client.sh
    - ./mc-client.sh
    - ./mc cp vapor-linux-amd64.tar.gz awid5/assets/vapor/latest
    - ./mc cp ./scripts/install.sh awid5/assets/vapor/latest
    - docker save $ACR_HOST/$PATH_NAME:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA | gzip > vapor-image.tar.gz
  artifacts:
    paths:
      - vapor-image.tar.gz
    expire_in: 1 day
  only:
    - dev
    - main
  tags:
    - idch-bg-awid1

build:docs:
  stage: build
  image:
    name: cimg/base:edge-22.04
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - |
      timeout=60
      until docker info >/dev/null 2>&1; do
        if [ $timeout -le 0 ]; then
          echo "Docker daemon failed to start"
          exit 1
        fi
        echo "Waiting for Docker daemon..."
        sleep 1
        timeout=$((timeout - 1))
      done
  script:
    - cat ${CONTAINER_BUILD_N_PUSH} > build.sh
    - chmod +x ./build.sh
    - ./build.sh
  only:
    - dev
    - main
  tags:
    - idch-bg-awid1
    
# ====================
# E2E TEST STAGE
# ====================

e2e:docker-compose:
  stage: e2e-test
  image: cimg/base:edge-22.04
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    COMPOSE_PROJECT_NAME: vapor-e2e-$CI_PIPELINE_ID
  before_script:
    # Install docker-compose
    - apk add --no-cache docker-compose bash curl jq
    # Wait for Docker
    - |-
        timeout=60
        until docker info >/dev/null 2>&1; do
          if [ $timeout -le 0 ]; then
            echo "Docker daemon failed to start"
            exit 1
          fi
          echo "Waiting for Docker daemon..."
          sleep 1
          timeout=$((timeout - 1))
        done
  script:
    - echo "Starting E2E test environment..."
    - cd development
    - docker-compose up -d
    - echo "Waiting for services to be ready..."
    - sleep 30
    - docker-compose ps
    - echo "Running E2E tests..."
    - docker-compose exec -T vapor-api-dev bash -c "cd /app && chmod +x test/*.sh"
    - docker-compose exec -T vapor-api-dev bash -c "cd /app && ./test/smoke_test.sh"
    - docker-compose exec -T vapor-api-dev bash -c "cd /app && ./test/test_docker_endpoints.sh"
    - docker-compose exec -T vapor-api-dev bash -c "cd /app && ./test/test_auth.sh"
  after_script:
    - cd development
    - docker-compose logs vapor-api-dev > vapor-api.log || true
    - docker-compose down -v || true
  artifacts:
    when: always
    paths:
      - development/vapor-api.log
    expire_in: 1 week
  when: manual
  only:
    - main
    - dev
  tags:
    - idch-bg-awid1

e2e:performance:
  stage: e2e-test
  image: cimg/base:edge-22.04
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - apk add --no-cache bash curl jq
    # Load the Docker image from artifacts
    - docker load -i vapor-image.tar.gz
  script:
    - echo "Starting Vapor container for performance testing..."
    - docker run -d --name vapor-perf -p 8080:8080 --privileged $ACR_HOST/$PATH_NAME:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
    - sleep 10
    - echo "Running performance tests..."
    - chmod +x ./test/performance_test.sh
    - ./test/performance_test.sh || true
  after_script:
    - docker logs vapor-perf > performance.log || true
    - docker stop vapor-perf || true
    - docker rm vapor-perf || true
  artifacts:
    when: always
    paths:
      - performance.log
      - performance-results.json
    expire_in: 1 week
  when: manual
  only:
    - main
    - dev
  allow_failure: true
  tags:
    - idch-bg-awid1

manual:full-test:
  stage: e2e-test
  image: golang:${GO_VERSION}
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - *go_before_script
    - apt-get update
    - apt-get install -y libvirt-dev pkg-config docker.io docker-compose
    - go mod download
  script:
    - echo "Running all tests..."
    - chmod +x ./test/run_all_tests.sh
    - ./test/run_all_tests.sh
  when: manual
  only:
    - main
    - dev
  tags:
    - idch-bg-awid1

deploy:docs:
  image: cimg/base:edge-22.04
  stage: deploy
  dependencies: []
  only:
    - main
  tags:
    - idch-bg-awid1
  script:
    - cat ${DEPLOY_DOCS_WEB} > deploy.sh
    - chmod +x ./deploy.sh
    - ./deploy.sh
