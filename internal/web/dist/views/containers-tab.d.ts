import { LitElement } from 'lit';
import '../components/modal-dialog';
export declare class ContainersTab extends LitElement {
    private activeTab;
    private containers;
    private images;
    private searchTerm;
    private error;
    private runtime;
    private showConfirmModal;
    private confirmAction;
    private selectedContainer;
    private selectedImage;
    private showDrawer;
    private detailError;
    private confirmTitle;
    private confirmMessage;
    private showLogsDrawer;
    private containerLogs;
    private logsError;
    private logsSearchTerm;
    static styles: import("lit").CSSResult;
    connectedCallback(): void;
    disconnectedCallback(): void;
    handleOutsideClick(event: Event): void;
    handleKeyDown(event: KeyboardEvent): void;
    fetchData(): Promise<void>;
    fetchContainerDetails(id: string): Promise<void>;
    fetchImageDetails(id: string): Promise<void>;
    fetchContainers(): Promise<void>;
    fetchImages(): Promise<void>;
    showConfirmDialog(title: string, message: string, action: () => void): void;
    handleConfirm(): void;
    handleCancel(): void;
    startContainer(id: string, name?: string): Promise<void>;
    stopContainer(id: string, name?: string): Promise<void>;
    removeContainer(id: string, name?: string): Promise<void>;
    removeImage(id: string, tag?: string): Promise<void>;
    fetchContainerLogs(id: string, name?: string): Promise<void>;
    renderContainersTable(): import("lit-html").TemplateResult<1>;
    renderImagesTable(): import("lit-html").TemplateResult<1>;
    formatSize(bytes: number): string;
    getStatusClass(state: string | undefined): string;
    getStatusTooltip(state: string | undefined): string;
    toggleActionMenu(event: Event, menuId: string): void;
    closeAllMenus(): void;
    renderTabs(): import("lit-html").TemplateResult<1>;
    renderError(): import("lit-html").TemplateResult<1>;
    renderContainerDetails(): import("lit-html").TemplateResult<1> | undefined;
    renderImageDetails(): import("lit-html").TemplateResult<1> | undefined;
    render(): import("lit-html").TemplateResult<1>;
    highlightSearchTerm(text: string, searchTerm: string): string;
}
//# sourceMappingURL=containers-tab.d.ts.map